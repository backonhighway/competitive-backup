package bugged;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

// 625div1easy, cant submit b/c server bug
public class PalindromePermutations
{
	public double palindromeProbability(String word)
	{
		int len = word.length();
		int[] c = new int[26]; // c[char] = count
		for (int i=0; i<len; i++) {
			c[(int) word.charAt(i) - 97]++;
		}
		int oddcount = 0;
		for (int i = 0; i < c.length; i++) {
			if (c[i] % 2 != 0) oddcount++;
		}
		if (oddcount > 1) return 0;
		if (word.length() % 2 == 1 && oddcount != 1) return 0;
		if (word.length() % 2 == 0 && oddcount != 0) return 0;
		
		int[] bunshi = new int[len+1]; //counts
		int[] bunbo = new int[len+1];
		
		int evenlen = (len / 2);
		for (int i=1; i<=evenlen; i++) {
			bunshi[i]++;
		}
		for (int i=1; i<=len; i++) {
			bunbo[i]++;
		}
		for (int i = 0; i < c.length; i++) {
			if (c[i] % 2 != 0) continue;
			
			for (int j=1; j<= c[i]; j++) {
				bunshi[j]++;
			}
			for (int j=1; j<=c[i]/2; j++) {
				bunbo[j]++;
			}
		}
		
		for (int i=1; i<=len; i++) {
			int tempbunbo = Math.max(0, bunbo[i] - bunshi[i]);
			int tempbunshi = Math.max(0, bunshi[i] - bunbo[i]);
			bunbo[i] = tempbunbo;
			bunshi[i] = tempbunshi;
		}
		
		double ret = 1.0;
		for (int i=1; i<=len; i++) {
			for (int j=0; j<bunbo[i]; j++) {
				ret /= (double) i;
			}
			for (int j=0; j<bunshi[i]; j++) {
				ret *= (double) i;
			}

		}
//		if (len % 2 == 1) ret /= len;
		
		return ret;
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, double p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		PalindromePermutations obj;
		double answer;
		obj = new PalindromePermutations();
		long startTime = System.currentTimeMillis();
		answer = obj.palindromeProbability(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == answer && Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String p0;
		double p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = "haha";
		p1 = 0.3333333333333333D;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = "xxxxy";
		p1 = 0.2D;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = "xxxx";
		p1 = 1.0D;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = "abcde";
		p1 = 0.0D;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhff";
		p1 = 0.025641025641025637D;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A palindrome is a word that reads the same forwards and backwards. For example, "a", "abba", and "zzz" are palindromes, while "ab" and "xxxyx" are not.
	// 
	// The anagram of a string S is any string we can obtain from S by rearranging its letters. For example, the string "haha" has exactly six anagrams: "aahh", "ahah", "ahha", "haah", "haha", and "hhaa".
	// 
	// We are given a String word. We will choose one of its anagrams uniformly at random. Return the probability that the chosen anagram will be a palindrome.
	// 
	// DEFINITION
	// Class:PalindromePermutations
	// Method:palindromeProbability
	// Parameters:String
	// Returns:double
	// Method signature:double palindromeProbability(String word)
	// 
	// 
	// NOTES
	// -The returned value must have an absolute or a relative error of less than 1e-9.
	// 
	// 
	// CONSTRAINTS
	// -word will contain between 1 and 50 characters, inclusive.
	// -Each character of word will be a lowercase English letter ('a'-'z').
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "haha"
	// 
	// Returns: 0.3333333333333333
	// 
	// Each of the six anagrams of "haha" will be selected with probability 1/6.
	// Two of them are palindromes: "ahha" and "haah".
	// Hence, the probability of selecting a palindrome is 2/6.
	// 
	// 1)
	// "xxxxy"
	// 
	// Returns: 0.2
	// 
	// 
	// 
	// 2)
	// "xxxx"
	// 
	// Returns: 1.0
	// 
	// This word only has one anagram: "xxxx". That is a palindrome.
	// 
	// 3)
	// "abcde"
	// 
	// Returns: 0.0
	// 
	// Regardless of how we rearrange the letters of "abcde", we will never get a palindrome.
	// 
	// 4)
	// "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhff"
	// 
	// Returns: 0.025641025641025637
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
