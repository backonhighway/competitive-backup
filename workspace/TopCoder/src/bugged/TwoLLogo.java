package bugged;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TwoLLogo
{
	public long countWays(String[] grid)
	{
		int h = grid.length;
		int w = grid[0].length();
		int[][] up = new int[h][w];
		int[][] right = new int[h][w];
		
		// pre calc
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				int height = 0;
				int width = 0;
				for (int i2 = i-1; i2 >= 0; i2--) {
					if (grid[i2].charAt(j) == '.') height++;
					else break;
				}
				for (int j2 = j+1; j2 < w; j2++) {
					if (grid[i].charAt(j2) == '.') width++;
					else break;
				}
				up[i][j] = height;
				right[i][j] = width;
			}
		}
		
		// calc
		long ret = 0;
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				for (int i2 = 0; i2 < h; i2++) {
					for (int j2 = 0; j2 < w; j2++) {
						long one = getArea(i, i2, j, j2, up, right);
						long two = getArea(i2, i, j2, j, up, right);
						if (one != 0 && two != 0) ret += one * two;
					}
				}
			}
		}
		return ret / 2;
	}
	
	public long getArea(int i, int i2, int j, int j2, int[][] up, int[][] right) {
		int height = up[i][j];
		if (j == j2 && i >= i2) height = Math.min(height, i-i2-1);
		height = Math.max(0, height);
		int width = right[i][j];
		if (i == i2 && j <= j2) width = Math.min(width, j2-j-1);
		width = Math.max(0,width);
		return (long) height * width;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		TwoLLogo obj;
		long answer;
		obj = new TwoLLogo();
		long startTime = System.currentTimeMillis();
		answer = obj.countWays(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String[] p0;
		long p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new String[]{"....","...."};
		p1 = 1L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new String[]{".##..","...#.",".#.#.","#...#"};
		p1 = 3L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new String[]{"..#.","#.#.","....","..#."};
		p1 = 4L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new String[]{"..",".."};
		p1 = 0L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new String[]{".#.#","....",".#.#","...."};
		p1 = 34L;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new String[]{"##############","##############","#.############","#.############","#.############","#.############","#.############","#.############","#.#####.######","#.#####.######","#.#####.######","#....##.######","#######.######","#######.######","#######.######","#######.######","#######.######","#######.######","#######......#","##############"};
		p1 = 1350L;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = new String[]{"#......",".#....#",".#.#...","#....#.",".##..#.",".#.....",".....#.",".#.#...",".#...#.","..##..."};
		p1 = 2386L;
		all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 7 -----
		disabled = false;
		p0 = new String[]{};
		p1 = 5020791386L;
		all_right = (disabled || KawigiEdit_RunTest(7, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Please note that this problem has a non-standard time limit: 3 seconds.
	// 
	// A yet unknown "LL Company" wants to design a logo. After a long discussion, company designers decided that the logo should consist of two letters L drawn in some way.
	// 
	// To start with something, designers drew N rows of M points each, one under another, so that these points form a rectangular grid. They also painted each point either white or black. Here is an example of what they could get for N = 4 and M = 5:
	// 
	// 
	// 
	// Designers agreed to draw each letter L as a union of a horizontal and a vertical line segment intersecting at their left and bottom ends, respectively. The segments must have positive lengths, and their endpoints must be white grid points. All grid points that lie on the segments must be white as well. For example, here are two valid placements of a letter:
	// 
	// ?
	// 
	// 
	// Note that neither the letters nor the grid can be rotated.
	// 
	// The final requirement is that the two letters should be disjoint. That is, no white point should lie on two segments belonging to different letters.
	// 
	// You are given the grid with N rows and M columns, encoded as a String[] grid with N elements, each containing M characters. Each character is either '.' or '#', meaning that the corresponding point is either white or black, respectively.
	// 
	// Return the number of different possible logos with two L's drawn on them according to the requirements. Two logos are considered different if there is a pair of points that is connected by a line segment in exactly one of the logos.
	// 
	// 
	// DEFINITION
	// Class:TwoLLogo
	// Method:countWays
	// Parameters:String[]
	// Returns:long
	// Method signature:long countWays(String[] grid)
	// 
	// 
	// CONSTRAINTS
	// -grid will contain between 2 and 30 elements, inclusive.
	// -All elements of grid will contain the same number of characters.
	// -Each element of grid will contain between 2 and 30 characters, inclusive.
	// -Each character of grid will be either '.' or '#'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"....",
	//  "...."}
	// 
	// Returns: 1
	// 
	// 
	// 
	// 
	// 
	// 1)
	// {".##..",
	//  "...#.",
	//  ".#.#.",
	//  "#...#"}
	// 
	// Returns: 3
	// 
	// This is the example from the problem statement. The three possible logos look as follows:
	// 
	// ?
	// ?
	// 
	// 
	// 
	// 2)
	// {"..#.",
	//  "#.#.",
	//  "....",
	//  "..#."}
	// 
	// Returns: 4
	// 
	// 
	// ?
	// ?
	// ?
	// 
	// 
	// 
	// 3)
	// {"..",
	//  ".."}
	// 
	// Returns: 0
	// 
	// Too small for a logo.
	// 
	// 4)
	// {".#.#",
	//  "....",
	//  ".#.#",
	//  "...."}
	// 
	// Returns: 34
	// 
	// 
	// 
	// 5)
	// {"##############",
	//  "##############",
	//  "#.############",
	//  "#.############",
	//  "#.############",
	//  "#.############",
	//  "#.############",
	//  "#.############",
	//  "#.#####.######",
	//  "#.#####.######",
	//  "#.#####.######",
	//  "#....##.######",
	//  "#######.######",
	//  "#######.######",
	//  "#######.######",
	//  "#######.######",
	//  "#######.######",
	//  "#######.######",
	//  "#######......#",
	//  "##############"}
	// 
	// Returns: 1350
	// 
	// Corners of L's are identified uniquely in this case, but line segment lengths can vary.
	// 
	// 6)
	// {"#......",
	//  ".#....#",
	//  ".#.#...",
	//  "#....#.",
	//  ".##..#.",
	//  ".#.....",
	//  ".....#.",
	//  ".#.#...",
	//  ".#...#.",
	//  "..##..."}
	// 
	// Returns: 2386
	// 
	// 
	// 
	// 7)
	// {"...#..........................",
	//  "..............................",
	//  "..............................",
	//  "..................#...#.......",
	//  "..................#...........",
	//  "..............................",
	//  "...........#..................",
	//  "..............................",
	//  ".....#..#.....................",
	//  ".......................#......",
	//  "..................#.....#.....",
	//  "..............................",
	//  "..............................",
	//  "..............................",
	//  "..............................",
	//  "..#...........................",
	//  "..............................",
	//  "..............................",
	//  "..............................",
	//  "#............................#",
	//  "..............................",
	//  ".....#.........#............#.",
	//  "..............................",
	//  ".........................#....",
	//  ".#............................",
	//  ".............#................",
	//  "..............................",
	//  "..............................",
	//  ".......................#......",
	//  ".............#................"}
	// 
	// Returns: 5020791386
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
