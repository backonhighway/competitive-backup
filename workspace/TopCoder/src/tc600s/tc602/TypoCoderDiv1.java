package tc600s.tc602;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TypoCoderDiv1
{
	int[][][] dp;
	public int getmax(int[] D, int X)
	{
		int len = D.length;
		this.dp = new int[len+1][2][2201]; //[how many contests][over or under][rate] = changes
		for (int i = 0; i < len+1; i++) {
			Arrays.fill(dp[i][0], -1);
			Arrays.fill(dp[i][1], -1);
		}
		dp[0][0][X] = 0;
		for (int i = 0; i < len; i++) {
			for (int r = 0; r <= 2200; r++) {
				int nextrate;
				// not over
				if (dp[i][0][r] != -1) {
					// win i
					if (r + D[i] >= 2200) {
						if (i == len-1) {
							nextrate = 2200;
						} else {
							nextrate = Math.max(r + D[i] - D[i+1], 0);
						}
						nextrate = Math.min(nextrate, 2200);
						dp[i+1][1][nextrate] = Math.max(dp[i+1][1][nextrate], dp[i][0][r] + 1);
					} else {
						nextrate = r + D[i];
						dp[i+1][0][nextrate] = Math.max(dp[i+1][0][nextrate], dp[i][0][r]);
					}
					// lose i
					if (r - D[i] >= 2200) {
						if (i == len-1) {
							nextrate = 2200;
						} else {
							nextrate = Math.max(r - D[i] - D[i+1], 0);
						}
						nextrate = Math.min(nextrate, 2200);
						dp[i+1][1][nextrate] = Math.max(dp[i+1][1][nextrate], dp[i][0][r] + 1);
					} else {
						nextrate = Math.max(r - D[i], 0);
						dp[i+1][0][nextrate] = Math.max(dp[i+1][0][nextrate], dp[i][0][r]);
					}
				}
				
				// over
				if (dp[i][1][r] != -1) {
					// win i
					int rate = r + D[i];
					if (rate + D[i] < 2200) {
						nextrate = Math.max(rate + D[i], 0);
						dp[i+1][0][nextrate] = Math.max(dp[i+1][0][nextrate], dp[i][1][r] + 1);
					}
					// lose i
					if (rate - D[i] < 2200) {
						nextrate = Math.max(rate - D[i], 0);
						dp[i+1][0][nextrate] = Math.max(dp[i+1][0][nextrate], dp[i][1][r] + 1);
					}
				}

			}
		}
		int ret = 0;
		for (int r = 0; r <= 2200; r++) {
			ret = Math.max(ret, dp[len][0][r]);
			ret = Math.max(ret, dp[len][1][r]);
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		TypoCoderDiv1 obj;
		int answer;
		obj = new TypoCoderDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.getmax(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{100,200,100,1,1};
		p1 = 2000;
		p2 = 3;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{0,0,0,0,0};
		p1 = 2199;
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{90000,80000,70000,60000,50000,40000,30000,20000,10000};
		p1 = 0;
		p2 = 1;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{1000000000,1000000000,10000,100000,2202,1};
		p1 = 1000;
		p2 = 4;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{2048,1024,5012,256,128,64,32,16,8,4,2,1,0};
		p1 = 2199;
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new int[]{61,666,512,229,618,419,757,217,458,883,23,932,547,679,565,767,513,798,870,31,379,294,929,892,173,127,796,353,913,115,802,803,948,592,959,127,501,319,140,694,851,189,924,590,790,3,669,541,342,272};
		p1 = 1223;
		p2 = 29;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = new int[]{34,64,43,14,58,30,2,16,90,58,35,55,46,24,14,73,96,13,9,42,64,36,89,42,42,64,52,68,53,76,52,54,23,88,32,52,28,96,70,32,26,3,23,78,47,23,54,30,86,32};
		p1 = 1328;
		p2 = 20;
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// TypoCoder is a programming contest like TopCoder.
	// TypoCoder also has a rating system.
	// There are two types of coders in TypoCoder: brown coders and ciel coders.
	// A brown coder is a coder whose rating is greater than or equal to 2200.
	// A ciel coder is a coder whose rating is less than 2200.
	// 
	// Cat Lower competes in TypoCoder.
	// He is currently a ciel coder.
	// His rating at the end of the current year is X.
	// 
	// Next year there will be some contests.
	// In each of those contests, Cat Lower can either try his best or lose on purpose.
	// For each i, the i-th contest (0-based index) has weight D[i].
	// If Cat Lower tries his best in the i-th contest, his rating will increase by D[i].
	// If he decides to lose on purpose instead, his rating will decrease by D[i], but not below zero.
	// Formally, his rating will decrease by min(D[i],his rating before the contest).
	// 
	// Cat Lower loves being a ciel coder.
	// Therefore, he must never be a brown coder twice in a row.
	// That is, whenever Cat Lower becomes a brown coder, he must be ciel again after the next contest (if there are any contests left).
	// 
	// TypoCoder awards "Chameleon coder of the year" to the coder whose color changed the most times during the year.
	// 
	// You are given the int[] D and the int X.
	// Return the maximal number of color changes Cat Lower can have next year.
	// 
	// 
	// DEFINITION
	// Class:TypoCoderDiv1
	// Method:getmax
	// Parameters:int[], int
	// Returns:int
	// Method signature:int getmax(int[] D, int X)
	// 
	// 
	// CONSTRAINTS
	// -D will contain between 1 and 50 elements, inclusive.
	// -Each element of D will be between 0 and 1,000,000,000 (10^9), inclusive.
	// -X will be between 0 and 2199, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {100,200,100,1,1}
	// 2000
	// 
	// Returns: 3
	// 
	// When he increase at the second, the third and the last competition and decrease at the first and the fourth competition, he can change the color 3 times and this is the maximal.
	// 
	// 1)
	// {0,0,0,0,0}
	// 2199
	// 
	// Returns: 0
	// 
	// He cannot be a brown coder in this case.
	// 
	// 2)
	// {90000,80000,70000,60000,50000,40000,30000,20000,10000}
	// 0
	// 
	// Returns: 1
	// 
	// Note that Cat Lower always has at least one valid strategy: if he decides to lose in all contests, he will remain ciel forever.
	// In this test case, the optimal strategy for him is to lose in the first eight contests and then to win in the last one.
	// Note that before the last contest his rating will be 0.
	// 
	// 3)
	// {1000000000,1000000000,10000,100000,2202,1}
	// 1000
	// 
	// Returns: 4
	// 
	// 
	// 
	// 4)
	// {2048,1024,5012,256,128,64,32,16,8,4,2,1,0}
	// 2199
	// 
	// Returns: 0
	// 
	// 
	// 
	// 5)
	// {61,666,512,229,618,419,757,217,458,883,23,932,547,679,565,767,513,798,870,31,379,294,929,892,173,127,796,353,913,115,802,803,948,592,959,127,501,319,140,694,851,189,924,590,790,3,669,541,342,272}
	// 1223
	// 
	// Returns: 29
	// 
	// 
	// 
	// 6)
	// {34,64,43,14,58,30,2,16,90,58,35,55,46,24,14,73,96,13,9,42,64,36,89,42,42,64,52,68,53,76,52,54,23,88,32,52,28,96,70,32,26,3,23,78,47,23,54,30,86,32}
	// 1328
	// 
	// Returns: 20
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
