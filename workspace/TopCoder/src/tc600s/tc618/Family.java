package tc600s.tc618;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class Family
{
	int[] parent1;
	int[] parent2;
	int len;
	
	public String isFamily(int[] parent1, int[] parent2)
	{
		this.parent1 = parent1;
		this.parent2 = parent2;
		this.len = parent1.length;
		
		boolean ret = true;
		for (int i = 0; i < len; i++) {
			int[] status = new int[len];
			status[i] = 1;
			if (dfs(i, 1, status) == false) {
				ret = false;
			}
		}
		return ret ? "Possible" : "Impossible";
	}
	
	public boolean dfs(int person, int gender, int[] status) {
		boolean ret = true;
		for (int i = 0; i < len; i++) {
			if (parent1[i] == person) {
				if (status[parent2[i]] == gender) {
					return false;
				}
				if (status[parent2[i]] == 0) {
					status[parent2[i]] = 3 - gender;
					ret = dfs(parent2[i], 3 - gender, status);
				}
			}
			if (parent2[i] == person) {
				if (status[parent1[i]] == gender) {
					return false;
				}
				if (status[parent1[i]] == 0) {
					status[parent1[i]] = 3 - gender;
					ret = dfs(parent1[i], 3 - gender, status);
				}
			}
			if (ret == false) return false;
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		Family obj;
		String answer;
		obj = new Family();
		long startTime = System.currentTimeMillis();
		answer = obj.isFamily(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		String p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{-1,-1,0};
		p1 = new int[]{-1,-1,1};
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{-1,-1,-1,-1,-1};
		p1 = new int[]{-1,-1,-1,-1,-1};
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{-1,-1,0,0,1};
		p1 = new int[]{-1,-1,1,2,2};
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{-1,-1,-1,-1,1,-1,0,5,6,-1,0,3,8,6};
		p1 = new int[]{-1,-1,-1,-1,3,-1,4,6,5,-1,5,4,6,1};
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{-1,-1,-1,2,2,-1,5,6,4,6,2,1,8,0,2,4,6,9,-1,16,-1,11};
		p1 = new int[]{-1,-1,-1,1,0,-1,1,4,2,0,4,8,2,3,0,5,14,14,-1,7,-1,13};
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A directed acyclic graph is a family graph if the following constraints are all satisfied:
	// 
	// The nodes of the graph are numbered 0 through N-1, for some positive N.
	// Each node is either male or female.
	// Each node either has no parents, or it has precisely two parents. (A parent of the node x is a node y such that there is an edge from y to x.)
	// If a node has parents, their numbers are strictly smaller than the number of the node.
	// If a node has parents, one of them must be male and the other female.
	// 
	// 
	// You are given two int[]s parent1 and parent2 with N elements each.
	// These describe one directed graph that resembles a family graph:
	// For each i, node i has either two parents (in which case parent1[i] and parent2[i] are their numbers, and both of them are smaller than i), or it has no parents (in which case parent1[i] and parent2[i] are both -1).
	// 
	// Return "Possible" (quotes for clarity) if the given graph can be a family graph, and "Impossible" otherwise.
	// 
	// DEFINITION
	// Class:Family
	// Method:isFamily
	// Parameters:int[], int[]
	// Returns:String
	// Method signature:String isFamily(int[] parent1, int[] parent2)
	// 
	// 
	// CONSTRAINTS
	// -parent1 will contain between 1 and 100 elements, inclusive.
	// -parent1 and parent2 will contain the same number of elements.
	// -For each i, the i-th element (0-based) of parent1 will be between -1 and i-1, inclusive.
	// -For each i, the i-th element (0-based) of parent2 will be between -1 and i-1, inclusive.
	// -For each i, the i-th element of parent1 will be -1 if and only if the i-th element of parent2 is -1.
	// -For each i, if the i-th element of parent1 is not -1, then the i-th element of parent1 and the i-th element of parent2 will be different.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {-1,-1,0}
	// {-1,-1,1}
	// 
	// Returns: "Possible"
	// 
	// The parents of node 2 are nodes 0 and 1. Nodes 0 and 1 have no parents.
	// 
	// 1)
	// {-1,-1,-1,-1,-1}
	// {-1,-1,-1,-1,-1}
	// 
	// Returns: "Possible"
	// 
	// Nobody has any parents.
	// 
	// 2)
	// {-1,-1,0,0,1}
	// {-1,-1,1,2,2}
	// 
	// Returns: "Impossible"
	// 
	// Given that 0 and 1 have a child, their genders must be different. Given that 0 and 2 have a child, their genders must be different, too. Then, 1 and 2 must have the same gender, hence they cannot have a child together. Therefore, this cannot be a valid family graph.
	// 
	// 3)
	// {-1,-1,-1,-1,1,-1,0,5,6,-1,0,3,8,6}
	// 
	// {-1,-1,-1,-1,3,-1,4,6,5,-1,5,4,6,1}
	// 
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// 4)
	// {-1,-1,-1,2,2,-1,5,6,4,6,2,1,8,0,2,4,6,9,-1,16,-1,11}
	// {-1,-1,-1,1,0,-1,1,4,2,0,4,8,2,3,0,5,14,14,-1,7,-1,13}
	// 
	// Returns: "Impossible"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
