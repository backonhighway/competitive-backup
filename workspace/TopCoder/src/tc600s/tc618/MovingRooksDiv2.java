package tc600s.tc618;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class MovingRooksDiv2
{
	HashSet<Integer> visited = new HashSet<>();
	int len;
	int[] Y2;
	public String move(int[] Y1, int[] Y2)
	{
		len = Y1.length;
		this.Y2 = Y2;
		
		return dfs(Y1) ? "Possible" : "Impossible";
	}
	
	public boolean dfs(int[] Y1) {
		int now = 0;
		for (int i = 0; i < len; i++) {
			int temp = 1;
			for (int j = 0; j < i; j++) {
				temp *= 10;
			}
			now += temp * Y1[i];
		}
		if (visited.contains(now)) return false;
		visited.add(now);
		
		boolean isSame = true;
		for (int i = 0; i < len; i++) {
			if (Y1[i] != Y2[i]) isSame = false;
		}
		if (isSame) return true;
		
		boolean ret = false;
		for (int i = 0; i < len; i++) {
			for (int j = i+1; j < len; j++) {
				if (Y1[i] > Y1[j]) {
					//new array
					int[] n = new int[len];
					for (int k = 0; k < len; k++) {
						n[k] = Y1[k];
					}
					//swap
					int temp = n[i];
					n[i] = n[j];
					n[j] = temp;
					ret |= dfs(n);
				}
			}
		}
		return ret;
	}
	
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		MovingRooksDiv2 obj;
		String answer;
		obj = new MovingRooksDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.move(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		String p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{0};
		p1 = new int[]{0};
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{1,0};
		p1 = new int[]{0,1};
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{0,1};
		p1 = new int[]{1,0};
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{3,1,2,0};
		p1 = new int[]{0,2,1,3};
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{3,1,2,0};
		p1 = new int[]{3,2,0,1};
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{5,4,6,7,3,1,2,0};
		p1 = new int[]{4,5,6,7,3,2,0,1};
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// This problem is about chessboards with rooks.
	// A rook is a chess piece that moves arbitrarily far, either horizontally or vertically.
	// Both rows and columns of chessboards in our problem are numbered starting from 0.
	// 
	// An n times n chessboard is called peaceful if it contains exactly n rooks and no two rooks attack each other.
	// In other words, there cannot be two rooks in the same row or in the same column of the chessboard.
	// A peaceful chessboard can be described by a int[] Y with n elements: for each row r, the rook in row r is in column Y[r].
	// 
	// You are given two int[]s Y1 and Y2 with n elements each.
	// Each of them represents one peaceful chessboard.
	// 
	// You want to change the first chessboard into the second one.
	// There is only one type of moves you are allowed to make:
	// On the first chessboard, you can choose two rooks in positions (r1,c1) and (r2,c2) such that r1 < r2 and c1 > c2, and move them to (r1,c2) and (r2,c1).
	// Note that the new chessboard is peaceful again.
	// 
	// Return "Possible" (quotes for clarity) if it is possible to change the first chessboard into the second one. Otherwise, return "Impossible".
	// 
	// DEFINITION
	// Class:MovingRooksDiv2
	// Method:move
	// Parameters:int[], int[]
	// Returns:String
	// Method signature:String move(int[] Y1, int[] Y2)
	// 
	// 
	// CONSTRAINTS
	// -Y1 will contain between 1 and 8 elements, inclusive.
	// -Y2 will contain the same number of elements as Y1.
	// -Each element of Y1 will be between 0 and n-1, inclusive, where n is the number of elements of Y1.
	// -Each element of Y2 will be between 0 and n-1, inclusive, where n is the number of elements of Y2.
	// -All elements of Y1 will be distinct.
	// -All elements of Y2 will be distinct.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {0}
	// {0}
	// 
	// Returns: "Possible"
	// 
	// Both boards are already equal, we don't even have to make any moves.
	// 
	// 1)
	// {1,0}
	// {0,1}
	// 
	// Returns: "Possible"
	// 
	// Initially, the rooks on the first chessboard are on the cells (0,1) and (1,0).
	// There is one valid move: moving these two rooks to (0,0) and (1,1).
	// After this move, the first chessboard is identical to the second one.
	// 
	// 2)
	// {0,1}
	// {1,0}
	// 
	// Returns: "Impossible"
	// 
	// There are no valid moves so there's no way to reach the goal.
	// 
	// 3)
	// {3,1,2,0}
	// {0,2,1,3}
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// 4)
	// {3,1,2,0}
	// {3,2,0,1}
	// 
	// Returns: "Impossible"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
