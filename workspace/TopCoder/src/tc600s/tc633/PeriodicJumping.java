package tc600s.tc633;

public class PeriodicJumping
{
	public int minimalTime(int x, int[] jumpLengths)
	{
		int ret = 0;
		int abslen = Math.abs(x);
		long sum = 0;
		for (int i=0; i<jumpLengths.length; i++) {
			sum += jumpLengths[i];
		}
		ret += jumpLengths.length * (abslen / sum);
		System.out.println(ret);
		int i=0;
		int loop = 0;
		boolean ok = false;
		long total = sum * (abslen / sum);
		int max = 0;
		if (total == abslen) return ret;
		while(loop < 2) {
			ret++;
			max = Math.max(max, jumpLengths[i]);
			total += jumpLengths[i];
			if (total >= abslen) {
				if (max <= abslen + (total - max)) {
					ok = true;
					break;
				}
			}
			i++;
			if (i == jumpLengths.length) {
				loop++;
				i = 0;
			}
		}
		
		return ok ? ret : -1;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		PeriodicJumping obj;
		int answer;
		obj = new PeriodicJumping();
		long startTime = System.currentTimeMillis();
		answer = obj.minimalTime(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 15;
		p1 = new int[]{1,2,3,4,5,6,7,8,9,10};
		p2 = 5;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 5;
		p1 = new int[]{5};
		p2 = 1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 1;
		p1 = new int[]{10};
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = -10;
		p1 = new int[]{2,3,4,500,6,7,8};
		p2 = 11;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = -1000000000;
		p1 = new int[]{1};
		p2 = 1000000000;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = 0;
		p1 = new int[]{19911120};
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 =9;
		p1 = new int[]{772315883, 948801907, 98119050, 332167024, 90543450, 984872854, 38742565, 925804740, 773648065, 747538803, 418344074, 82024644, 908911712, 900413060, 567506548, 328888170, 679620977, 134381153, 917548834, 579233405, 989349349, 706906090, 52516266, 293093511, 11048303, 745411998, 531770467, 720217823, 140798884, 207817129, 33522981, 971002846, 890522096, 990265718, 358225050, 766726420, 355198127, 424365730, 331750579, 96129537, 64599184, 238258575, 455658049, 443945039, 21293907, 591926314, 803118293, 715681892, 979576220, 382647791};
		p2 = 4;
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Frog Suwako lives on a two-dimensional plane.
	// Currently, she is located in the point (0, 0).
	// She would like to reach the point (x, 0).
	// 
	// 
	// 
	// Suwako jumps in a peculiar way: her jump lengths repeat in a periodic fashion.
	// The int[] jumpLengths contains one period of her jump lengths, starting with the length of the first jump she will make.
	// For example, if jumpLengths = { 2, 5 }, Suwako's jump lengths will be 2, 5, 2, 5, 2, 5, ...
	// Note that Suwako can jump onto arbitrary points in the plane, they are not required to have integer coordinates.
	// 
	// 
	// 
	// You are given the int x and the int[] jumpLengths.
	// Return the smallest non-negative integer j such that Suwako can reach the desired destination after j jumps.
	// If there is no such j, return -1 instead.
	// 
	// DEFINITION
	// Class:PeriodicJumping
	// Method:minimalTime
	// Parameters:int, int[]
	// Returns:int
	// Method signature:int minimalTime(int x, int[] jumpLengths)
	// 
	// 
	// CONSTRAINTS
	// -x will be between -1,000,000,000 and 1,000,000,000, inclusive.
	// -jumpLengths will contain between 1 and 50 elements, inclusive.
	// -Each element in len will be between 1 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 15
	// {1,2,3,4,5,6,7,8,9,10}
	// 
	// Returns: 5
	// 
	// In 4 jumps Suwako cannot get far enough. In 5 jumps she can reach the destination as follows: (0,0) -> (1,0) -> (3,0) -> (6,0) -> (10,0) -> (15,0).
	// 
	// 
	// 1)
	// 5
	// {5}
	// 
	// Returns: 1
	// 
	// One jump is enough, since the distance between (0,0) and (5,0) is exactly 5.
	// 
	// 2)
	// 1
	// {10}
	// 
	// Returns: 2
	// 
	// Here Suwako needs two jumps. One possible solution is to land at (0.5, sqrt(10*10-0.5*0.5)) after the first jump.
	// 
	// 
	// 3)
	// -10
	// {2,3,4,500,6,7,8}
	// 
	// Returns: 11
	// 
	// 
	// 
	// 4)
	// -1000000000
	// {1}
	// 
	// Returns: 1000000000
	// 
	// 
	// 
	// 5)
	// 0
	// {19911120}
	// 
	// Returns: 0
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
