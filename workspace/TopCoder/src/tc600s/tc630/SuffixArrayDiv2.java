package tc600s.tc630;

import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SuffixArrayDiv2
{
	public String smallerOne(String s)
	{
		int len = s.length();
		String[] possible = new String[len];
		for (int i = 0; i < len; i++) {
			possible[i] = s.substring(i, len);
		}
		Arrays.sort(possible);
//		int[] order = new int[len];
//		for (int i = 0; i < len; i++) {
//			order[i] = possible[i].length();
//		}
		
		//change one char 
		for (int i = 0; i < len; i++) {
			if (s.charAt(i) == 'a') continue;
			StringBuilder sb = new StringBuilder();
			sb.append(s.substring(0, i));
			sb.append((char)(s.charAt(i) - 1));
			sb.append(s.substring(i+1));
			String changed = sb.toString();
			System.out.println(changed);
			if (isSameOrder(possible, changed)) return "Exists";
		}
		return "Does not exist";
	}
	
	public boolean isSameOrder(String[] possible, String changed) {
		int len = possible.length;
		String[] possible2 = new String[len];
		for (int i = 0; i < len; i++) {
			possible2[i] = changed.substring(i, len);
		}
		Arrays.sort(possible2);
		for (int i = 0; i < len; i++) {
			if (possible[i].length() != possible2[i].length()) return false;
		}
		return true;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		SuffixArrayDiv2 obj;
		String answer;
		obj = new SuffixArrayDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.smallerOne(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String p0;
		String p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = "abca";
		p1 = "Exists";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = "bbbb";
		p1 = "Exists";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = "aaaa";
		p1 = "Does not exist";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = "examplesareveryweakthinktwicebeforesubmit";
		p1 = "Exists";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Suffix number i of a string S is the suffix that starts with the character S[i].
	// For example, for S="abcde" suffix 0 is "abcde" and suffix 3 is "de". 
	// 
	// 
	// The suffix array of a string S is defined as the permutation of suffix numbers that corresponds to their lexicographic order.
	// For example, suppose that S="abca".
	// If we order all suffixes of S lexicographically, we get the following: "a" < "abca" < "bca" < "ca".
	// The corresponding suffix numbers are 3, 0, 1, and 2, in this order.
	// Thus, for this string S the suffix array would be {3, 0, 1, 2}.
	// Note that the length of a suffix array is the same as the length of the original string.
	// 
	// 
	// In this problem, we will only consider strings of lowercase English letters ('a'-'z').
	// You are given a String s.
	// We are interested in a string t that is lexicographically smaller than s but has exactly the same suffix array.
	// Return "Exists" if at least one such string t exists, and "Does not exist" otherwise.
	// 
	// DEFINITION
	// Class:SuffixArrayDiv2
	// Method:smallerOne
	// Parameters:String
	// Returns:String
	// Method signature:String smallerOne(String s)
	// 
	// 
	// NOTES
	// -Given two different strings A and B of the same length, A is lexicographically smaller than B if we have A[i] < B[i] for the smallest i such that A[i] and B[i] differ.
	// 
	// 
	// CONSTRAINTS
	// -s will contain between 1 and 50 elements, inclusive.
	// -Each element in s will be a lowercase letter ('a'-'z').
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "abca"
	// 
	// Returns: "Exists"
	// 
	// For example, "aaqa" < "abca" but their suffix arrays are the same.
	// 
	// 1)
	// "bbbb"
	// 
	// Returns: "Exists"
	// 
	// Obviously, one of the strings smaller than "bbbb" with the same suffix array is "aaaa".
	// 
	// 2)
	// "aaaa"
	// 
	// Returns: "Does not exist"
	// 
	// The string "aaaa" is already the lexicographically smallest 4-letter string.
	// 
	// 3)
	// "examplesareveryweakthinktwicebeforesubmit"
	// 
	// Returns: "Exists"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
