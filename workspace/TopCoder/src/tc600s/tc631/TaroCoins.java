package tc600s.tc631;

import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TaroCoins
{
	public long getNumber(long N)
	{
		String str = Long.toBinaryString(N);
		int len = str.length();
		if (len == 1) return 1L;
		System.out.println(str);
		long[][] dp = new long[len][2];
		dp[len - 1][0] = 1;
		
		for (int i = len - 1; i > 0; i--) {
			if (str.charAt(i) == '1') {
				//choose 1
				dp[i - 1][0] += dp[i][0];
				//choose 0
				dp[i - 1][0] += dp[i][1];
				//choose 2
				dp[i - 1][1] += dp[i][1]; 
			} else {
				//choose 1
				dp[i - 1][1] += dp[i][1];
				//choose 0
				dp[i - 1][0] += dp[i][0];
				//choose 2
				dp[i - 1][1] += dp[i][0]; 
			}
		}
		return dp[0][0] + dp[0][1];
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, long p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		TaroCoins obj;
		long answer;
		obj = new TaroCoins();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		long p0;
		long p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 1L;
		p1 = 1L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 6L;
		p1 = 3L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 47L;
		p1 = 2L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 256L;
		p1 = 9L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 8489289L;
		p1 = 6853L;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = 1000000000L;
		p1 = 73411L;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Cat Taro likes coins. For any non-negative integer K, he has exactly two coins of value 2^K (i.e., two to the power of K).
	// 
	// 
	// 
	// 
	// You are given a long N.
	// Return the number of different ways Taro can represent the value N with coins that he has.
	// (Two representations are considered different if there is a value that occurs a different number of times in the representations.)
	// 
	// 
	// DEFINITION
	// Class:TaroCoins
	// Method:getNumber
	// Parameters:long
	// Returns:long
	// Method signature:long getNumber(long N)
	// 
	// 
	// NOTES
	// -The answer will always fit in a signed 64-bit integer.
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 1,000,000,000,000,000,000 (10^18), inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 1
	// 
	// Returns: 1
	// 
	// The only possible way to represent N in this case is to use one coin of value 1.
	// 
	// 1)
	// 6
	// 
	// Returns: 3
	// 
	// The following three representations are possible in this case: {1, 1, 2, 2}, {1, 1, 4} and {2, 4}
	// 
	// 2)
	// 47
	// 
	// Returns: 2
	// 
	// 
	// 
	// 3)
	// 256
	// 
	// Returns: 9
	// 
	// 
	// 
	// 4)
	// 8489289
	// 
	// Returns: 6853
	// 
	// 
	// 
	// 5)
	// 1000000000
	// 
	// Returns: 73411
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
