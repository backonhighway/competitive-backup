package tc600s.tc609;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class MagicalStringDiv1
{
	final int INF = 1<<30;
	public int getLongest(String S)
	{
		int maxlen = 0;
		int len = S.length();
		
		for (int i = 0; i < len; i++) {
			int left = 0;
			for (int j = 0; j < i; j++) {
				if (S.charAt(j) == '>') left++;
			}
			int right = 0;
			for (int j = i; j < len; j++) {
				if (S.charAt(j) == '<') right++; 
			}
			maxlen = Math.max(maxlen, Math.min(left,right) * 2);
		}
		
		return maxlen;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		MagicalStringDiv1 obj;
		int answer;
		obj = new MagicalStringDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.getLongest(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = "<><><<>";
		p1 = 4;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = ">>><<<";
		p1 = 6;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = "<<<>>>";
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = "<<<<><>>><>>><>><>><>>><<<<>><>>>>><<>>>>><><<<<>>";
		p1 = 24;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Magical Girl Illy uses "magical strings" to cast spells.
	// For her, a string X is magical if and only if there exists a non-negative integer k such that X is composed of k consecutive '>' characters followed by k consecutive '<' characters.
	// Note that the empty string is also magical (for k=0).
	// 
	// Once Illy picked up a String S.
	// Each character of S was either '<' or '>'.
	// Illy can change S by removing some of its characters.
	// (The characters she does not remove will remain in their original order.)
	// Illy wants to change S into a magical string by removing as few of its characters as possible.
	// 
	// You are given the String S.
	// Compute and return the length of the magical string Illy will obtain from S.
	// 
	// DEFINITION
	// Class:MagicalStringDiv1
	// Method:getLongest
	// Parameters:String
	// Returns:int
	// Method signature:int getLongest(String S)
	// 
	// 
	// CONSTRAINTS
	// -S will contain between 1 and 50 characters, inclusive.
	// -Each character of S will be '<' or '>'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "<><><<>"
	// 
	// Returns: 4
	// 
	// The longest magical string Illy can produce is ">><<".
	// Its length is 4.
	// To change S into ">><<", Illy must remove the characters at 0-based indices 0, 2, and 6.
	// 
	// 1)
	// ">>><<<"
	// 
	// Returns: 6
	// 
	// S is already a magical string. Therefore Illy doesn't have to remove any character.
	// 
	// 
	// 2)
	// "<<<>>>"
	// 
	// Returns: 0
	// 
	// Illy has to remove all characters of S.
	// 
	// 3)
	// "<<<<><>>><>>><>><>><>>><<<<>><>>>>><<>>>>><><<<<>>"
	// 
	// Returns: 24
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
