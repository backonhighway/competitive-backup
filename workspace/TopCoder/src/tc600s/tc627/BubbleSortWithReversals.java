package tc600s.tc627;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class BubbleSortWithReversals
{
	final int INF = 1 << 30;
	public int getMinSwaps(int[] a, int k)
	{
		int len = a.length;
		int[][] dp = new int[len][k + 1]; 
		
		//precalculate
		int[][] dec = new int[len][len]; //number of swaps decreased
		for (int i = 0; i < len; i++) {
			for (int j = i; j < len; j++) {
				int sum = 0;
				for (int i2 = i; i2 <= j; i2++) {
					for (int j2 = i2; j2 <= j; j2++) {
						if (a[i2] > a[j2]) sum++;
						if (a[i2] < a[j2]) sum--; 
					}
				}
				dec[i][j] = sum;
			}
		}
		int all = 0;
		for (int i = 0; i < len; i++) {
			for (int j = i; j < len; j++) {
				if (a[i] > a[j]) all++;
			}
		}
		
		for (int i = 0; i < len; i++) {
			//dont flip
			if(i != 0) {
				for (int kj = 0; kj <= k; kj++) {
					dp[i][kj] = Math.max(dp[i][kj], dp[i-1][kj]);
				}
			}
			
			//flip to j
			for (int j = i; j < len; j++) {
				for (int kj = 1; kj <= k; kj++) {
					dp[j][kj - 1] = Math.max(dp[j][kj - 1], dp[i][kj] + dec[i][j]);
				}
			}
		}
		int max = 0;
		for (int kj = 0; kj <= k; kj++) {
			max = Math.max(max, dp[len-1][kj]);
		}
		
		return all - max;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		BubbleSortWithReversals obj;
		int answer;
		obj = new BubbleSortWithReversals();
		long startTime = System.currentTimeMillis();
		answer = obj.getMinSwaps(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{6,8,8,7,7};
		p1 = 1;
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{7,2,2,13,5,5,2};
		p1 = 2;
		p2 = 3;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{12,5,1,10,12,6,6,10,6,8};
		p1 = 2;
		p2 = 12;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{2,3,1};
		p1 = 2;
		p2 = 1;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{482,619,619,601,660,660,691,691,77,77,96,77};
		p1 = 9;
		p2 = 22;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// The pseudocode shown below is an implementation of BubbleSort.
	// Note that the array A used in the implementation is 0-based.
	// That is, elements of A have indices 0 through Length(A)-1, inclusive.
	// 
	// 
	// BubbleSort(A):
	//         Repeat Length(A)-1 times:
	//                For every i from 0 to Length(A)-2, inclusive:
	//                       If A[i] > A[i+1] then:
	//                                Swap A[i] and A[i+1]
	// 
	// 
	// We are going to sort the array A using the above algorithm.
	// However, before we do that, you are allowed to reverse at most K disjoint subarrays of A.
	// 
	// For example, suppose that A={10, 20, 30, 40, 50, 60, 70} and that K=1.
	// In this case you may, for example, reverse the subarray [2,5] - that is, the elements at (0-based) indices 2 through 5.
	// This would produce the array {10, 20, 60, 50, 40, 30, 70}.
	// 
	// We are interested in minimizing the number of swaps executed by our BubbleSort.
	// You are given the int[] A and the int K.
	// Return the smallest possible number of swaps performed by our BubbleSort after you reverse at most K disjoint subarrays of A.
	// 
	// 
	// DEFINITION
	// Class:BubbleSortWithReversals
	// Method:getMinSwaps
	// Parameters:int[], int
	// Returns:int
	// Method signature:int getMinSwaps(int[] A, int K)
	// 
	// 
	// CONSTRAINTS
	// -A will contain between 2 and 50 elements.
	// -K will be between 1 and 50.
	// -Each element of A will be between 1 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {6,8,8,7,7}
	// 1
	// 
	// Returns: 0
	// 
	// By reversing the subarray [1,4] we obtain a new array {6,7,7,8,8}. This array is already sorted and we can easily verify that our BubbleSort never swaps anything.
	// 
	// 
	// 1)
	// {7,2,2,13,5,5,2}
	// 2
	// 
	// Returns: 3
	// 
	// 
	// 
	// 2)
	// {12,5,1,10,12,6,6,10,6,8}
	// 2
	// 
	// Returns: 12
	// 
	// 
	// 
	// 3)
	// {2,3,1}
	// 2
	// 
	// Returns: 1
	// 
	// Note that the subarrays we are reversing must all be disjoint. For example, it is not allowed to reverse first the subarray [0,1] and then the subarray [0,2].
	// 
	// 
	// 4)
	// {482,619,619,601,660,660,691,691,77,77,96,77}
	// 9
	// 
	// Returns: 22
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
