package tc600s.tc603;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class MaxMinTreeGame
{
	public int findend(int[] edges, int[] costs)
	{
		//find all leaf
		int N = costs.length;
		int[] edgecount = new int[N];
		for (int i = 0; i < edges.length; i++) {
			int from = i+1;
			int to = edges[i];
			edgecount[from]++;
			edgecount[to]++;
		}
		int ret = 0;
		for (int i = 0; i < N; i++) {
			if (edgecount[i] == 1) {
				ret = Math.max(ret, costs[i]);
			}
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		MaxMinTreeGame obj;
		int answer;
		obj = new MaxMinTreeGame();
		long startTime = System.currentTimeMillis();
		answer = obj.findend(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{0};
		p1 = new int[]{4,6};
		p2 = 6;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{0,1};
		p1 = new int[]{4,6,5};
		p2 = 5;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{0,1,2,3};
		p1 = new int[]{0,1,0,1,0};
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{0,0,0};
		p1 = new int[]{5,1,2,3};
		p2 = 3;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{0,0};
		p1 = new int[]{3,2,5};
		p2 = 5;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// MaxMinTreeGame is a game for two players.
	// The game is played on a tree.
	// The tree has N nodes, labeled 0 through N-1.
	// Each node of the tree also has an integer cost.
	// 
	// The players take alternating turns.
	// In her turn, the current player starts by choosing one edge of the tree and erasing it.
	// This necessarily divides the tree into two components.
	// The current player then decides which of the components to keep, and erases the other component completely.
	// 
	// The game ends when there is only one node left.
	// The cost of that node is the result of the game.
	// The first player (i.e., the one that starts the game) wants to maximize the result.
	// Naturally, the second player's goal is to minimize the result.
	// 
	// You are given a int[] edges that describes the structure of the tree.
	// For each i between 0 and N-2, inclusive, the tree contains an edge between the vertices i+1 and edges[i].
	// You are also given a int[] costs.
	// For each i between 0 and N-1, inclusive, the cost of vertex i is costs[i].
	// 
	// Return the result of the game, assuming that both players play optimally.
	// 
	// DEFINITION
	// Class:MaxMinTreeGame
	// Method:findend
	// Parameters:int[], int[]
	// Returns:int
	// Method signature:int findend(int[] edges, int[] costs)
	// 
	// 
	// CONSTRAINTS
	// -The number of nodes in the tree N will be between 2 and 50, inclusive.
	// -edges will contain exactly N-1 elements.
	// -For each i, edges[i] will be between 0 and i, inclusive.
	// -costs will contain exactly N elements.
	// -Each element of costs will be between 0 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {0}
	// {4,6}
	// 
	// Returns: 6
	// 
	// There is only one edge in this tree and the first player will choose it. After that she will keep the component containing the node with cost 6.
	// 
	// 
	// 1)
	// {0,1}
	// {4,6,5}
	// 
	// Returns: 5
	// 
	// One of the optimal moves for the first player is to remove the edge between nodes 0 and 1 and to keep the component containing nodes 1 and 2. The second player will then remove the remaining edge and keep the node with cost 5.
	// 
	// 
	// 2)
	// {0,1,2,3}
	// {0,1,0,1,0}
	// 
	// Returns: 0
	// 
	// 
	// 
	// 3)
	// {0,0,0}
	// {5,1,2,3}
	// 
	// Returns: 3
	// 
	// 
	// 
	// 4)
	// {0,0}
	// {3,2,5}
	// 
	// Returns: 5
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
