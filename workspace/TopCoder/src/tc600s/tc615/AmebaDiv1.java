package tc600s.tc615;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class AmebaDiv1
{
	public int count(int[] X)
	{
		HashSet<Long> set = new HashSet<>();
		int len = X.length;
		for (int i = 0; i < len; i++) { //try i
			long sim = X[i];
			for (int j = 0; j < len; j++) { //simulate
				if (sim == X[j]) {
					sim += X[j];
				}
			}
			set.add(sim);
		}
		
		HashSet<Long> xset = new HashSet<>();
		for (int i = 0; i < len; i++) {
			xset.add((long)X[i]);
		}
		int count = 0;
		for (long x : xset) {
			if (!set.contains(x)) count++;
		}
		return count;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		AmebaDiv1 obj;
		int answer;
		obj = new AmebaDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{3,2,1};
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{2,2,2,2,2,2,4,2,2,2};
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{1,2,4,8,16,32,64,128,256,1024,2048};
		p1 = 11;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{854,250,934,1000,281,250,281,467,854,562,934,1000,854,500,562};
		p1 = 7;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Monte-Carlo is an amoeba. Amoebas can feed on gel: whenever an amoeba encounters a piece of gel that is exactly as big as the amoeba, the amoeba will consume the gel and thus double its size.
	// 
	// Initially, the size of Monte-Carlo was some unknown positive integer. During its lifetime, Monte-Carlo encountered several gels and consumed the ones it could.
	// 
	// You are given a int[] X. The elements of X are the sizes of gels Monte-Carlo encountered, in chronological order.
	// 
	// Let S be the set of all possible final sizes of Monte-Carlo. Compute and return the number of positive integers that do not belong into S.
	// 
	// DEFINITION
	// Class:AmebaDiv1
	// Method:count
	// Parameters:int[]
	// Returns:int
	// Method signature:int count(int[] X)
	// 
	// 
	// NOTES
	// -It is possible to prove that the answer for any test case is finite and fits into a 32-bit signed integer type.
	// 
	// 
	// CONSTRAINTS
	// -X will contain between 1 and 200 integers, inclusive.
	// -Each element of X will be between 1 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {3,2,1}
	// 
	// Returns: 2
	// 
	// Here are a few possibilities how Monte-Carlo's life could have looked like:
	// 
	// Monte-Carlo started with size 1, ignored gel #0, ignored gel #1, consumed gel #2 and thus reached size 2.
	// Monte-Carlo started with size 3, consumed gel #0 and thus reached size 6, and then ignored the next two gels (as they were too small).
	// Monte-Carlo started with size 47 and ignored all three gels.
	// 
	// All final sizes except for 1 and 3 are possible.
	// 
	// 1)
	// {2,2,2,2,2,2,4,2,2,2}
	// 
	// Returns: 2
	// 
	// If Monte-Carlo starts with size 2, its life will look as follows: First, it will consume gel #0 and thus grow to 4. Later, after ignoring a few gels, Monte-Carlo will consume gel #6 (the one with size 4) and thus grow to 8.
	// 
	// It can be shown that for this X Monte-Carlo's final size can never be 2 or 4. 
	// 
	// 2)
	// {1,2,4,8,16,32,64,128,256,1024,2048}
	// 
	// Returns: 11
	// 
	// 
	// 
	// 3)
	// {854,250,934,1000,281,250,281,467,854,562,934,1000,854,500,562}
	// 
	// Returns: 7
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
