package tc600s.tc637;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ConnectingGameDiv2
{
	public int getmin(String[] board)
	{
		final int RN = 62; //region number
		final int INF = 1<<29;
		int ylen = board.length;
		int xlen = board[0].length();
		int[] dx = {-1,0,1,-1,1,-1, 0, 1};
		int[] dy = {1 ,1,1, 0,0,-1,-1,-1};
		
		// calc cost
		int[] cost = new int[RN];
		
		for (int i = 0; i < ylen; i++) {
			for (int j = 0; j < xlen; j++) {
				char region = board[i].charAt(j);
				cost[getInt(region)]++;
			}
		}
		
		//make table
		int[][] d = new int[RN+2][RN+2];
		for (int i = 0; i < d.length; i++) {
			Arrays.fill(d[i], INF);
		}
		
		for (int i = 0; i < ylen; i++) {
			for (int j = 0; j < xlen; j++) {
				int fromRegion = getInt(board[i].charAt(j));
				for (int dir = 0; dir < 8; dir++) {
					int nx = j + dx[dir];
					int ny = i + dy[dir];
					if (nx < 0 || xlen <= nx || ny < 0 || ylen <= ny) continue;
					int toRegion = getInt(board[ny].charAt(nx));
					d[fromRegion][toRegion] = cost[toRegion];
				}
			}
		}
		
		for (int i = 0; i < ylen; i++) {
			//start
			int toRegion = getInt(board[i].charAt(0));
			d[RN][toRegion] = cost[toRegion];
			
			//end
			toRegion = getInt(board[i].charAt(xlen-1));
			d[toRegion][RN+1] = 0;
			
		}
		//same
		for (int i = 0; i < d.length; i++) {
			d[i][i] = 0;
		}
		
		//figure min distance
		int len = d.length;
		for (int k=0; k<len; k++) {
			for (int i=0; i<len; i++) {
				for (int j=0; j<len; j++) {
					d[i][j] = Math.min(d[i][j], d[i][k] + d[k][j]);
				}
			}
		}
		
		return d[RN][RN+1];
	}
	
	public int getInt(char c) {
		if ('A' <= c && c <= 'Z') return c - 'A';
		if ('a' <= c && c <= 'z') return c - 'a' + 26;
		if ('0' <= c && c <= '9') return c - '0' + 52;
		assert false;
		return -1;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		ConnectingGameDiv2 obj;
		int answer;
		obj = new ConnectingGameDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.getmin(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new String[]{"AA","BC"};
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new String[]{"AAB","ACD","CCD"};
		p1 = 4;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new String[]{"iii","iwi","iii"};
		p1 = 8;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new String[]{"rng58","Snuke","Sothe"};
		p1 = 6;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new String[]{"yyAArJqjWTH5","yyEEruYYWTHG","hooEvutpkkb2","OooNgFFF9sbi","RRMNgFL99Vmm","R76XgFF9dVVV","SKnZUPf88Vee"};
		p1 = 14;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new String[]{"AAAAAAaaabcdefg", "AAAAAAhhDDDDDDD", "AAAAiAjDDDDDDDD", "AAAAiijDDDDDDDD", "AAAAAAAkDDDDDDD", "AAAAoAAAlDDDDDD", "AAApBnAAlDDDDDD", "srqBBBmmmmDDDDD"};
		p1 = 26;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Cat Snuke and wolf Sothe are playing the Connecting Game.
	// 
	// The Connecting Game is played on a rectangular grid that is divided into unit square cells.
	// The grid is divided into some regions.
	// Each cell belongs into exactly one of those regions.
	// Each region is 4-connected (see Notes for a formal definition).
	// 
	// You are given a String[] board that describes the division of the grid into regions.
	// Each character in board represents one of the cells.
	// Cells that are represented by the same character belong into the same region.
	// 
	// Initially, the entire grid is colorless.
	// The game consists of two steps.
	// In the first step, Snuke colors some of the regions red.
	// In the second step, Sothe colors all remaining regions blue.
	// (Within each region, all cells must have the same color.)
	// Sothe wins if there is a path (see Notes for a formal definition) of blue cells from the top row to the bottom row.
	// Otherwise, Snuke wins.
	// 
	// You are given the String[] board.
	// Compute and return the smallest number of cells Snuke can color red in order to win the game.
	// 
	// (Note that Snuke cannot simply color individual cells, he must color entire regions.
	// Also note that we are interested in minimizing the total number of cells, not the number of regions Snuke colors.)
	// 
	// DEFINITION
	// Class:ConnectingGameDiv2
	// Method:getmin
	// Parameters:String[]
	// Returns:int
	// Method signature:int getmin(String[] board)
	// 
	// 
	// NOTES
	// -A path is a sequence of cells such that each pair of consecutive cells shares a common side.
	// -A region is 4-connected if for any two cells A and B in that region there is a path that starts with A, ends with B, and only contains cells from that region.
	// 
	// 
	// CONSTRAINTS
	// -board will contain between 1 and 50 elements, inclusive.
	// -Each element in board will contain between 1 and 50 characters, inclusive.
	// -All elements in board will have the same length.
	// -Each character in board will be a letter or a digit ('a'-'z', 'A'-'Z', or '0'-'9').
	// -Each of the regions in board will be 4-connected.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"AA"
	// ,"BC"}
	// 
	// Returns: 2
	// 
	// If Snuke colors 0 or 1 cells red, he will lose the game. He can win the game by coloring 2 cells red. One possibility is to color the two 'A' cells red.
	// 
	// 1)
	// {"AAB"
	// ,"ACD"
	// ,"CCD"}
	// 
	// Returns: 4
	// 
	// Here, one optimal solution is to color the regions 'B' and 'C' red. There will be 1 + 3 = 4 red cells.
	// 
	// 2)
	// {"iii"
	// ,"iwi"
	// ,"iii"}
	// 
	// Returns: 8
	// 
	// 
	// 
	// 3)
	// {"rng58"
	// ,"Snuke"
	// ,"Sothe"}
	// 
	// Returns: 6
	// 
	// 
	// 
	// 4)
	// {"yyAArJqjWTH5","yyEEruYYWTHG","hooEvutpkkb2","OooNgFFF9sbi","RRMNgFL99Vmm","R76XgFF9dVVV","SKnZUPf88Vee"}
	// 
	// Returns: 14
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
