package tc600s.tc621;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RadioRange
{
	public double RadiusProbability(int[] X, int[] Y, int[] R, int Z)
	{
		int len = X.length;
		double[] badFrom = new double[len];
		double[] badTo = new double[len];
		
		for (int i = 0; i < len; i++) {
			badFrom[i] = Math.max(0, getDist(X[i], Y[i]) - R[i]);
			badTo[i] = getDist(X[i], Y[i]) + R[i];
			if (badFrom[i] >= Z) {
				badFrom[i] = 0;
				badTo[i] = 0;
			}
			if (badTo[i] >= Z) {
				badTo[i] = Z;
			}
		}
		
		//merge
		boolean done = false;
		boolean[] deleted = new boolean[len];
		while (!done) {
			done = true;
			for (int i = 0; i < len; i++) {
				if (deleted[i]) continue;
				for (int j = 0; j < len; j++) {
					if (j == i) continue;
					if (deleted[j]) continue;
					if (badFrom[i] <= badTo[j] && badFrom[j] <= badTo[i]) {
						done = false;
						badFrom[i] = Math.min(badFrom[i], badFrom[j]);
						badTo[i] = Math.max(badTo[i], badTo[j]);
						deleted[j] = true;
					}
				}
			}
		}
		
		double ret = 0;
		for (int i = 0; i < len; i++) {
			if (deleted[i]) continue;
			ret += badTo[i] - badFrom[i];
		}
		
		return 1.0 - ret / Z;
	}
	
	public double getDist(int x, int y) {
		return Math.sqrt((double)x*(double)x + (double)y*(double)y);
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int[] p2, int p3, boolean hasAnswer, double p4) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + p3);
		System.out.println("]");
		RadioRange obj;
		double answer;
		obj = new RadioRange();
		long startTime = System.currentTimeMillis();
		answer = obj.RadiusProbability(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == answer && Math.abs(p4 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p4));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		int[] p2;
		int p3;
		double p4;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{0};
		p1 = new int[]{0};
		p2 = new int[]{5};
		p3 = 10;
		p4 = 0.5D;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{0};
		p1 = new int[]{0};
		p2 = new int[]{10};
		p3 = 10;
		p4 = 0.0D;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{10};
		p1 = new int[]{10};
		p2 = new int[]{10};
		p3 = 10;
		p4 = 0.4142135623730951D;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{11,-11,0,0};
		p1 = new int[]{0,0,11,-11};
		p2 = new int[]{10,10,10,10};
		p3 = 31;
		p4 = 0.3548387096774194D;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{100};
		p1 = new int[]{100};
		p2 = new int[]{1};
		p3 = 10;
		p4 = 1.0D;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new int[]{1000000000};
		p1 = new int[]{1000000000};
		p2 = new int[]{1000000000};
		p3 = 1000000000;
		p4 = 0.41421356237309503D;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = new int[]{20,-20,0,0};
		p1 = new int[]{0,0,20,-20};
		p2 = new int[]{50,50,50,50};
		p3 = 100;
		p4 = 0.3D;
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 7 -----
		disabled = false;
		p0 = new int[]{0,-60,-62,-60,63,-97};
		p1 = new int[]{-72,67,61,-8,-32,89};
		p2 = new int[]{6,7,8,7,5,6};
		p3 = 918;
		p4 = 0.9407071068962471D;
		all_right = (disabled || KawigiEdit_RunTest(7, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Note that the return value is a floating-point number and that in this problem the allowed absolute or relative error has been increased to 1e-6.
	// 
	// This problem takes place in a plane.
	// Nikola works at a radio station that is located in the point (0, 0).
	// You can hear the station if and only if you are within a circle with center at (0, 0) and some unknown radius.
	// 
	// There are some cities near the station.
	// Each city has the shape of a circle with some positive integer radius.
	// Cities may partially or even completely overlap each other, and some of them may contain the radio station.
	// You are given the description of all cities as int[]s X, Y, and R.
	// For each valid i, there is a city with center at (X[i], Y[i]) and radius R[i].
	// 
	// The radius of our radio station is bad if there is a city that is only partially covered by the radio signal.
	// Otherwise, the radius is good.
	// In other words, if there is a point in a city where you can listen to our radio and another point in the same city where you cannot do so, the radius is bad.
	// A radius is good if and only if each city is either covered completely by radio signal, or not covered at all.
	// 
	// You are given a int Z.
	// The radius of our radio station is a real number chosen uniformly at random from the range [0, Z].
	// Return the probability that the radius is good.
	// 
	// DEFINITION
	// Class:RadioRange
	// Method:RadiusProbability
	// Parameters:int[], int[], int[], int
	// Returns:double
	// Method signature:double RadiusProbability(int[] X, int[] Y, int[] R, int Z)
	// 
	// 
	// NOTES
	// -Your return value must have an absolute or relative error less than 1e-6.
	// 
	// 
	// CONSTRAINTS
	// -X will contain between 1 and 100 elements, inclusive.
	// -X, Y, and R will each contain the same number of elements.
	// -Each element of X will be between -10^9 and 10^9, inclusive.
	// -Each element of Y will be between -10^9 and 10^9, inclusive.
	// -Each element of R will be between 1 and 10^9, inclusive.
	// -Z will be between 1 and 10^9, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {0}
	// {0}
	// {5}
	// 10
	// 
	// Returns: 0.5
	// 
	// Our radio station is in the center of a city with radius 5, and we are choosing the radius for the station uniformly at random from [0,10].
	// Radii in [0,5) are all bad, because people in the center of the city can hear our radio but people on its boundary cannot.
	// Radii in [5,10] are all good, as the entire city is covered.
	// Hence, the probability of having a good radius is 5/10 = 0.5.
	// 
	// 1)
	// {0}
	// {0}
	// {10}
	// 10
	// 
	// Returns: 0.0
	// 
	// Our radio station is in the center of a city with radius 10, and we are choosing the radius for the station uniformly at random from [0,10].
	// In this case, the only good radius is 10, but the probability that it will be chosen is zero.
	// 
	// 2)
	// {10}
	// {10}
	// {10}
	// 10
	// 
	// Returns: 0.4142135623730951
	// 
	// The center of the city is at (10, 10) and its radius is 10.
	// The good radii for our station are those where the city is not covered at all.
	// These are the radii from 0 to approximately 4.14.
	// 
	// 3)
	// {11, -11, 0, 0}
	// {0, 0, 11, -11}
	// {10, 10, 10, 10}
	// 31
	// 
	// Returns: 0.3548387096774194
	// 
	// Here we have four cities.
	// They are located to the north, south, east, and west of the station.
	// A radius is good if it lies in [0,1) or in [21,31].
	// 
	// 4)
	// {100}
	// {100}
	// {1}
	// 10
	// 
	// Returns: 1.0
	// 
	// It is possible that some cities will not be covered even if the radius of our radio station is Z.
	// 
	// 5)
	// {1000000000}
	// {1000000000}
	// {1000000000}
	// 1000000000
	// 
	// Returns: 0.41421356237309503
	// 
	// 
	// 
	// 6)
	// {20, -20, 0, 0}
	// {0, 0, 20, -20}
	// {50, 50, 50, 50}
	// 100
	// 
	// Returns: 0.3
	// 
	// 
	// 
	// 7)
	// {0, -60, -62, -60, 63, -97}
	// {-72, 67, 61, -8, -32, 89}
	// {6, 7, 8, 7, 5, 6}
	// 918
	// 
	// Returns: 0.9407071068962471
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
