package tc600s.tc629;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RectangleCovering
{
	public final int INF = 1<<30;
	public int minimumNumber(int holeH, int holeW, int[] boardH, int[] boardW)
	{
		int ret = INF;
		int len = boardH.length;
		
		int[] hboard = new int[len];
		int[] wboard = new int[len];
		for (int i=0; i<len; i++) {
			int hmax = 0;
			int wmax = 0;
			if (boardH[i] > holeH) {
				hmax = Math.max(hmax, boardW[i]);
			}
			if (boardW[i] > holeH) {
				hmax = Math.max(hmax, boardH[i]);
			}
			if (boardH[i] > holeW) {
				wmax = Math.max(wmax, boardW[i]);
			}
			if (boardW[i] > holeW) {
				wmax = Math.max(wmax, boardH[i]);
			}
			hboard[i] = hmax;
			wboard[i] = wmax;
		}
		
		boolean ok = false;
		//H
		Arrays.sort(hboard);
		System.out.println(Arrays.toString(hboard));
		int count = 0;
		int coverlen = 0;
		for (int i=len-1; i>=0; i--) {
			coverlen += hboard[i];
			count++;
			if (coverlen >= holeW) {
				ok = true;
				break;
			}
		}
		ret = Math.min(ret, count);
		
		//W
		Arrays.sort(wboard);
		System.out.println(Arrays.toString(wboard));
		count = 0;
		coverlen = 0;
		for (int i=len-1; i>=0; i--) {
			coverlen += wboard[i];
			count++;
			if (coverlen >= holeH) {
				ok = true;
				break;
			}
		}
		ret = Math.min(ret, count);
		
		return ok ? ret : -1;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int[] p2, int[] p3, boolean hasAnswer, int p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p3.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p3[i]);
		}
		System.out.print("}");
		System.out.println("]");
		RectangleCovering obj;
		int answer;
		obj = new RectangleCovering();
		long startTime = System.currentTimeMillis();
		answer = obj.minimumNumber(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p4;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		int[] p2;
		int[] p3;
		int p4;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 5;
		p1 = 5;
		p2 = new int[]{8,8,8};
		p3 = new int[]{2,3,4};
		p4 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 10;
		p1 = 10;
		p2 = new int[]{6,6,6,6};
		p3 = new int[]{6,6,6,6};
		p4 = -1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 5;
		p1 = 5;
		p2 = new int[]{5};
		p3 = new int[]{5};
		p4 = -1;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 3;
		p1 = 5;
		p2 = new int[]{6};
		p3 = new int[]{4};
		p4 = 1;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 10000;
		p1 = 5000;
		p2 = new int[]{12345,12343,12323,12424,1515,6666,6789,1424,11111,25};
		p3 = new int[]{1442,2448,42,1818,3535,3333,3456,7890,1,52};
		p4 = 3;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// There is a rectangular hole in the ground.
	// You are given the dimensions of this rectangle: ints holeH and holeW.
	// 
	// 
	// 
	// You have a collection of rectangular boards.
	// You are given their dimensions as two int[]s: boardH and boardW.
	// For each valid i, you have a rectangular board with dimensions boardH[i] and boardW[i].
	// You would like to cover the hole completely, using as few of these boards as possible.
	// 
	// 
	// 
	// There are some rules you must follow when covering the hole:
	// 
	// The boards may overlap arbitrarily.
	// Together, the boards must cover the entire hole.
	// You may rotate each board, but you must place it so that the sides of the board are parallel to the sides of the hole.
	// All corners of each board must be strictly outside the hole. (That is, they are not allowed to lie on the boundary of the hole, either.)
	// 
	// 
	// 
	// 
	// If you can cover the hole using the boards you have, return the smallest number of boards that is sufficient to cover the hole. Otherwise, return -1.
	// 
	// 
	// DEFINITION
	// Class:RectangleCovering
	// Method:minimumNumber
	// Parameters:int, int, int[], int[]
	// Returns:int
	// Method signature:int minimumNumber(int holeH, int holeW, int[] boardH, int[] boardW)
	// 
	// 
	// CONSTRAINTS
	// -holeH and holeW will be between 1 and 1,000,000,000, inclusive.
	// -boardH and boardW will contain between 1 and 50 elements, inclusive.
	// -boardH and boardW will contain the same number of elements.
	// -Each element of boardH and boardW will be between 1 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 5
	// 5
	// {8,8,8}
	// {2,3,4}
	// 
	// Returns: 2
	// 
	// You cannot cover this hole completely by using a single board. You can cover it by taking any two boards and placing them side by side.
	// 
	// 1)
	// 10
	// 10
	// {6,6,6,6}
	// {6,6,6,6}
	// 
	// Returns: -1
	// 
	// These four boards cannot be used to cover the hole. This is because of the rule that all board corners must be outside the hole.
	// 
	// 2)
	// 5
	// 5
	// {5}
	// {5}
	// 
	// Returns: -1
	// 
	// The corners of a board are not allowed to be on the boundary of the hole.
	// 
	// 3)
	// 3
	// 5
	// {6}
	// {4}
	// 
	// Returns: 1
	// 
	// 
	// 
	// 4)
	// 10000
	// 5000
	// {12345,12343,12323,12424,1515,6666,6789,1424,11111,25}
	// {1442,2448,42,1818,3535,3333,3456,7890,1,52}
	// 
	// Returns: 3
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
