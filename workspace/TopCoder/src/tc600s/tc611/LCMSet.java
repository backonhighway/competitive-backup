package tc600s.tc611;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class LCMSet
{
	public String equal(int[] A, int[] B)
	{
		return check(A,B) && check(B,A) ? "Equal" : "Not equal";
	}
	
	public boolean check(int[] A, int[] B) {
		for (int i = 0; i < A.length; i++) {
			List<Integer> list = new ArrayList<>();
			for (int j = 0; j < B.length; j++) {
				if (A[i] % B[j] == 0) list.add(B[j]);
			}
			int lcmOfList = 1;
			for (int j : list) {
				lcmOfList = lcm(lcmOfList, j);
			}
			if (lcmOfList != A[i]) {
				return false;
			}
		}
		return true;
	}
	
	public int lcm(int a, int b){
		return a / gcd(a, b) * b;
	}
	
	public int gcd(int a, int b){
		return b != 0 ? gcd(b, a % b) : a;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		LCMSet obj;
		String answer;
		obj = new LCMSet();
		long startTime = System.currentTimeMillis();
		answer = obj.equal(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		String p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{2,3,4,12};
		p1 = new int[]{2,3,4,6};
		p2 = "Equal";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{4,9};
		p1 = new int[]{6,36};
		p2 = "Not equal";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{2,3,5,7,14,105};
		p1 = new int[]{2,3,5,6,7,30,35};
		p2 = "Equal";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{2,3,5,7,14,105};
		p1 = new int[]{2,3,5,6,7,30,36};
		p2 = "Not equal";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};
		p1 = new int[]{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};
		p2 = "Equal";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new int[]{999999999,1953125,512,1000000000};
		p1 = new int[]{999999999,1953125,512};
		p2 = "Equal";
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = new int[]{999999998,999999999,1000000000};
		p1 = new int[]{999999999,1000000000};
		p2 = "Not equal";
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		disabled = false;
		p0 = new int[]{161, 1453360, 18, 22781370, 8722, 3164153, 34622953, 10, 792323, 42821, 29950, 40, 179080, 64311, 50, 7574, 9273, 582, 37863540, 6, 598, 4195669, 394, 9, 7856, 7111240, 963, 484, 934036170, 8, 2720, 47, 25006, 41, 201274, 185, 781, 72, 5482741, 20, 5, 7284, 4840, 5734, 96, 748, 295, 39616150, 58967613} ;
		p1 = new int[]{18, 37863540, 58967613, 3164153, 41, 9, 582, 394, 484, 8, 7111240, 5, 25006, 7856, 10, 5482741, 748, 201274, 781, 50, 9273, 31126524, 2720, 72, 5734, 185, 8722, 6, 963, 34622953, 42821, 598, 40, 7574, 7284, 29950, 64311, 20, 47, 22781370, 295, 1640, 161, 96, 4195669, 792323};
		p2 = "Equal";
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// For any non-empty sequence of positive integers s1, s2, ..., sK their least common multiple is the smallest positive integer that is divisible by each of the given numbers.
	// We will use "lcm" to denote the least common multiple.
	// For example, lcm(3) = 3, lcm(4,6) = 12, and lcm(2,5,7) = 70.
	// 
	// 
	// Given a sequence S, we now define the set LCM(S) as follows:
	// LCM(S) = { lcm(s1, s2, ..., sk) | s1, s2, ..., sk belong to S, k > 0}.
	// In words: LCM(S) is the set of all values that can be obtained by selecting some elements of S and computing their least common multiple.
	// For example, for S={2,3,4} we have LCM(S)={2,3,4,6,12}.
	// 
	// 
	// You are given two int[]s A and B.
	// Return "Equal" if LCM(A) = LCM(B), and "Not equal" otherwise.
	// 
	// DEFINITION
	// Class:LCMSet
	// Method:equal
	// Parameters:int[], int[]
	// Returns:String
	// Method signature:String equal(int[] A, int[] B)
	// 
	// 
	// CONSTRAINTS
	// -A will contain between 1 and 50 elements, inclusive.
	// -B will contain between 1 and 50 elements, inclusive.
	// -Each element in A will be between 2 and 1,000,000,000, inclusive.
	// -Each element in B will be between 2 and 1,000,000,000, inclusive.
	// -Elements in A will be distinct.
	// -Elements in B will be distinct.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {2,3,4,12}
	// {2,3,4,6}
	// 
	// Returns: "Equal"
	// 
	// LCM(A) = LCM(B) = {2,3,4,6,12}
	// 
	// 1)
	// {4,9}
	// {6,36}
	// 
	// Returns: "Not equal"
	// 
	// LCM(A) = {4,9,36}, LCM(B) = {6,36}
	// 
	// 2)
	// {2,3,5,7,14,105}
	// {2,3,5,6,7,30,35}
	// 
	// Returns: "Equal"
	// 
	// 
	// 
	// 3)
	// {2,3,5,7,14,105}
	// {2,3,5,6,7,30,36}
	// 
	// Returns: "Not equal"
	// 
	// 
	// 
	// 4)
	// {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}
	// {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}
	// 
	// Returns: "Equal"
	// 
	// Note that some of the numbers in the sets LCM(A) and LCM(B) can be huge.
	// In this case, the largest number in LCM(A) is 2305567963945518424753102147331756070.
	// 
	// 5)
	// {999999999,1953125,512,1000000000}
	// {999999999,1953125,512}
	// 
	// Returns: "Equal"
	// 
	// 
	// 
	// 6)
	// {999999998,999999999,1000000000}
	// {999999999,1000000000}
	// 
	// Returns: "Not equal"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
