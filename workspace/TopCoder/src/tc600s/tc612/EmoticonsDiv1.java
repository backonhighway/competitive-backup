package tc600s.tc612;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class EmoticonsDiv1
{
	public int printSmiles(int smiles)
	{
		boolean[][] visited = new boolean[2001][2001];
		Queue<Integer> posQ = new LinkedList<>();
		Queue<Integer> copyQ = new LinkedList<>();
		Queue<Integer> countQ = new LinkedList<>();
		posQ.add(1);
		copyQ.add(0);
		countQ.add(0);
		while (true) {
			int pos = posQ.poll();
			int copy = copyQ.poll();
			if (pos == smiles) break;
			int count = countQ.poll();
			
			if (visited[pos][copy]) continue;
			visited[pos][copy] = true;

			if (pos < smiles) {
				//copy
				posQ.add(pos);
				copyQ.add(pos);
				countQ.add(count+1);
				//paste
				posQ.add(pos+copy);
				copyQ.add(copy);
				countQ.add(count+1);
			}

			//delete
			if (pos - 1 >= 0) {
				posQ.add(pos - 1);
				copyQ.add(copy);
				countQ.add(count+1);
			}
		}
		return countQ.poll();
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		EmoticonsDiv1 obj;
		int answer;
		obj = new EmoticonsDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.printSmiles(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 2;
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 4;
		p1 = 4;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 6;
		p1 = 5;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 18;
		p1 = 8;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 11;
		p1 = 8;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You are very happy because you advanced to the next round of a very important programming contest.
	// You want your best friend to know how happy you are.
	// Therefore, you are going to send him a lot of smile emoticons.
	// You are given an int smiles: the exact number of emoticons you want to send.
	// 
	// You have already typed one emoticon into the chat.
	// Then, you realized that typing is slow.
	// Instead, you will produce the remaining emoticons using copy, paste, and possibly some deleting.
	// 
	// You can only do three different operations:
	// 
	// Copy all the emoticons you currently have into the clipboard.
	// Paste all emoticons from the clipboard.
	// Delete one emoticon from the message.
	// 
	// Each operation takes precisely one second.
	// Copying replaces the old content of the clipboard.
	// Pasting does not empty the clipboard.
	// You are not allowed to copy just a part of the emoticons you already have.
	// You are not allowed to delete an emoticon from the clipboard.
	// 
	// Return the smallest number of seconds in which you can turn the one initial emoticon into smiles emoticons.
	// 
	// DEFINITION
	// Class:EmoticonsDiv1
	// Method:printSmiles
	// Parameters:int
	// Returns:int
	// Method signature:int printSmiles(int smiles)
	// 
	// 
	// CONSTRAINTS
	// -smiles will be between 2 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 2
	// 
	// Returns: 2
	// 
	// First use copy, then use paste. The first operation copies one emoticon into the clipboard, the second operation pastes it into the message, so now you have two emoticons and you are done.
	// 
	// 1)
	// 4
	// 
	// Returns: 4
	// 
	// One optimal solution is to copy the initial emoticon and then to paste it three times. Another optimal solution is to copy the one emoticon, paste it, copy the two emoticons you currently have, and paste two more.
	// 
	// 2)
	// 6
	// 
	// Returns: 5
	// 
	// 
	// Copy. This puts one emoticon into the clipboard.
	// Paste. You now have 2 emoticons in the message.
	// Copy. The clipboard now contains 2 emoticons.
	// Paste. You now have 4 emoticons in the message.
	// Paste. You now have 6 emoticons in the message and you are done.
	// 
	// 
	// 3)
	// 18
	// 
	// Returns: 8
	// 
	// 
	// 
	// 4)
	// 11
	// 
	// Returns: 8
	// 
	// Sometimes we actually do delete an emoticon in the optimal solution.
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
