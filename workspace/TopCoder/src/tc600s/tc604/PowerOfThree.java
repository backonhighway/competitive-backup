package tc600s.tc604;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PowerOfThree
{
	public String ableToGet(int x, int y)
	{
		makeFP();
		return solve(Math.abs(x), Math.abs(y)) ? "Possible" : "Impossible";
	}
	
	public boolean solve(int x, int y) {
		//find maxpow
		int maxXY = Math.max(x, y);
		int maxpow = MAX_POW;
		while (true) {
			if (maxpow < 0 || 
					(P[maxpow] - F[maxpow] <= maxXY && maxXY <= P[maxpow] + F[maxpow])) break;
			maxpow--;
		}
		System.out.println(maxpow);
		//doit
		while (true) {
			maxXY = Math.max(x, y);
			if (maxpow == -1) return maxXY == 0;
			if (P[maxpow] - F[maxpow] > maxXY || maxXY > P[maxpow] + F[maxpow]) return false;
			if (x > y) {
				x -= P[maxpow];
				x = Math.abs(x);
			} else {
				y -= P[maxpow];
				y = Math.abs(y);
			}
			maxpow--;
		}
	}
	

	final int MAX_POW = 19;
	int[] P = new int[MAX_POW+1]; //i^3
	int[] F = new int[MAX_POW+1]; //sum of i^3 excluding i
	
	public void makeFP() {
		P[0] = 1;
		F[0] = 0;
		for (int i = 1; i <= MAX_POW; i++) {
			P[i] = P[i-1] * 3;
			F[i] = F[i-1] + P[i-1];
		}
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		PowerOfThree obj;
		String answer;
		obj = new PowerOfThree();
		long startTime = System.currentTimeMillis();
		answer = obj.ableToGet(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		String p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 1;
		p1 = 3;
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 0;
		p1 = 2;
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 1;
		p1 = 9;
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 3;
		p1 = 0;
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 1;
		p1 = 1;
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = -6890;
		p1 = 18252;
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 6 -----
		disabled = false;
		p0 = 1000000000;
		p1 = -1000000000;
		p2 = "Impossible";
		all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 7 -----
		disabled = false;
		p0 = 0;
		p1 = 0;
		p2 = "Possible";
		all_right = (disabled || KawigiEdit_RunTest(7, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Ciel has a robot.
	// The robot is located on an infinite plane.
	// At the beginning, the robot starts at the coordinates (0, 0).
	// The robot can then make several steps.
	// The steps are numbered starting from 0.
	// 
	// In each step, Ciel must choose one of four directions for the robot: left (x coordinate decreases), right (x coordinate increases), up (y coordinate increases), or down (y coordinate decreases).
	// In step k, the robot will move 3^k units in the chosen direction.
	// It is not allowed to skip a step.
	// 
	// You are given ints x and y.
	// Return "Possible" (quotes for clarity) if it is possible that the robot reaches the point (x,y) after some (possibly zero) steps.
	// Otherwise, return "Impossible".
	// 
	// DEFINITION
	// Class:PowerOfThree
	// Method:ableToGet
	// Parameters:int, int
	// Returns:String
	// Method signature:String ableToGet(int x, int y)
	// 
	// 
	// CONSTRAINTS
	// -x will be between -1,000,000,000 and 1,000,000,000, inclusive.
	// -y will be between -1,000,000,000 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 1
	// 3
	// 
	// Returns: "Possible"
	// 
	// In step 0 Ciel will send the robot right to (1,0). In step 1 she will send it up to (1,3).
	// 
	// 1)
	// 0
	// 2
	// 
	// Returns: "Possible"
	// 
	// The robot will move from (0,0) down to (0,-1) and then up to (0,2).
	// 
	// 2)
	// 1
	// 9
	// 
	// Returns: "Impossible"
	// 
	// Note that it is not allowed to move the robot right in step 0, skip step 1, and then move the robot up in step 2.
	// 
	// 3)
	// 3
	// 0
	// 
	// Returns: "Impossible"
	// 
	// 
	// 
	// 4)
	// 1
	// 1
	// 
	// Returns: "Impossible"
	// 
	// 
	// 
	// 5)
	// -6890
	// 18252
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// 6)
	// 1000000000
	// -1000000000
	// 
	// Returns: "Impossible"
	// 
	// 
	// 
	// 7)
	// 0
	// 0
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
