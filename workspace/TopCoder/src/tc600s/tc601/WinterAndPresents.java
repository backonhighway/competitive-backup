package tc600s.tc601;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class WinterAndPresents
{
	public long getNumber(int[] apple, int[] orange)
	{
		int len = apple.length;
		int max = 2_000_001;
		for (int i = 0; i < len; i++) {
			max = Math.min(apple[i] + orange[i], max);
		}
		
		long ret = 0;
		for (int i = 1; i <= max; i++) {
			int ma = 0;
			int mo = 0;
			
			for (int j = 0; j < len; j++) {
				ma += Math.min(i, apple[j]);
			}
			for (int j = 0; j < len; j++) {
				mo += Math.min(i, orange[j]);
			}
			
			ret += ma - (len*i - mo) + 1;
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		WinterAndPresents obj;
		long answer;
		obj = new WinterAndPresents();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		long p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1};
		p1 = new int[]{1};
		p2 = 3L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{1,2,0,3};
		p1 = new int[]{4,5,0,6};
		p2 = 0L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{2,2,2};
		p1 = new int[]{2,2,2};
		p2 = 16L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{7,4,5};
		p1 = new int[]{1,10,2};
		p2 = 46L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{1000000};
		p1 = new int[]{1000000};
		p2 = 1000002000000L;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// It's winter time!
	// You need to prepare a Christmas gift for your friend.
	// 
	// 
	// 
	// 
	// You have several bags arranged in a row.
	// The bags only contain apples and oranges.
	// You are given an int[] apple and an int[] orange.
	// For each i, the i-th element of apple represents the number of apples in the i-th bag, and the i-th element of orange represents the number of oranges in the i-th bag.
	// 
	// 
	// 
	// 
	// You will choose the gift using the following procedure:
	// First, you will choose any positive integer X such that there are at least X pieces of fruit in each bag.
	// Then, you will take exactly X pieces of fruit out of each bag, and combine all the fruit into one present.
	// Return the number of different gifts that may be produced by following the given procedure.
	// (Two gifts are considered different if they contain a different number of apples or a different number of oranges.)
	// 
	// 
	// DEFINITION
	// Class:WinterAndPresents
	// Method:getNumber
	// Parameters:int[], int[]
	// Returns:long
	// Method signature:long getNumber(int[] apple, int[] orange)
	// 
	// 
	// CONSTRAINTS
	// -apple will contain between 1 and 50 elements, inclusive.
	// -orange will contain between 1 and 50 elements, inclusive.
	// -apple and orange will contain the same number of elements.
	// -Each element of apple and orange will be between 0 and 1,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1}
	// {1}
	// 
	// Returns: 3
	// 
	// Three different presents are possible in this case: 
	// 
	// 
	// 0 apples and 1 orange
	// 
	// 
	// 1 apple and 0 oranges
	// 
	// 
	// 1 apple and 1 orange
	// 
	// 
	// 
	// 1)
	// {1, 2, 0, 3}
	// {4, 5, 0, 6}
	// 
	// Returns: 0
	// 
	// As there is an empty bag, there is no way to choose the present.
	// 
	// 2)
	// {2, 2, 2}
	// {2, 2, 2}
	// 
	// Returns: 16
	// 
	// 
	// 
	// 3)
	// {7, 4, 5}
	// {1, 10, 2}
	// 
	// Returns: 46
	// 
	// 
	// 
	// 4)
	// {1000000}
	// {1000000}
	// 
	// Returns: 1000002000000
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
