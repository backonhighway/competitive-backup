package tc600s.tc613;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TaroCards
{
	public long getNumber(int[] first, int[] second, int K)
	{
		int len = first.length;
		final int maxBit = 1024;
		long[][][] dp = new long[len+1][maxBit][42];
		dp[0][0][0] = 1L;
		for (int i = 0; i < len; i++) {
			for (int j = 0; j < maxBit; j++) {
				for (int j2 = 0; j2 < 41; j2++) {
					//dont use
					dp[i+1][j][j2] += dp[i][j][j2];
					
					//use
					int nmask = j;
					int nj2 = j2;
					nmask |= 1 << (second[i] - 1);
					if (first[i] <= 10) {
						nmask |= 1 << (first[i] - 1);
					} else {
						nj2++;
					}
					
					dp[i+1][nmask][nj2] += dp[i][j][j2];
				}
			}
		}
		
		long ans = 0L;
		for (int i = 0; i < maxBit; i++) {
			for (int j = 0; j < 41; j++) {
				int count = Integer.bitCount(i) + j;
				if (count <= K) {
					ans += dp[len][i][j];
				}
			}
		}
		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, long p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		TaroCards obj;
		long answer;
		obj = new TaroCards();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		int p2;
		long p3;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1,2};
		p1 = new int[]{2,3};
		p2 = 2;
		p3 = 3L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{3,1,2};
		p1 = new int[]{1,1,1};
		p2 = 3;
		p3 = 8L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{4,2,1,3};
		p1 = new int[]{1,2,3,4};
		p2 = 5;
		p3 = 16L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{1,2,3,4,5,6,7};
		p1 = new int[]{2,1,10,9,3,2,2};
		p2 = 3;
		p3 = 17L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{1};
		p1 = new int[]{2};
		p2 = 1;
		p3 = 1L;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new int[]{44, 33, 45, 49, 28, 16, 36, 27, 46, 50, 35, 29, 31, 10, 34, 13, 30, 32, 9, 12, 38, 39, 7, 6, 14, 47, 4, 3, 11, 25, 20, 37, 23, 15, 5, 41, 17, 18, 19, 24, 26, 2, 48, 8, 40, 42, 21, 22, 43, 1};
		p1 = new int[]{10, 6, 4, 1, 10, 10, 6, 2, 2, 2, 3, 4, 4, 10, 8, 3, 4, 4, 1, 5, 9, 5, 4, 10, 3, 5, 10, 1, 6, 8, 5, 8, 7, 7, 4, 1, 10, 1, 9, 1, 2, 6, 2, 1, 4, 10, 6, 9, 10, 7};
		p2 = 86;
		p3 = 1125899906842624L;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Cat Taro has N cards.
	// Exactly two integers are written on each card.
	// You are given two int[]s first and second, each with N elements.
	// For each i, the element first[i] represents the first integer on the i-th card, and the element second[i] represents the second integer on the i-th card.
	// 
	// 
	// 
	// 
	// It is known that for each x from 1 to N, inclusive, there is exactly one card with the first integer equal to x.
	// In other words, all elements of first represent a permutation of integers from 1 to N, inclusive.
	// On the other hand, second may contain duplicates, but all elements of second are only between 1 and 10, inclusive.
	// 
	// 
	// 
	// 
	// You are also given an int K. Taro wants to choose some subset of the cards (possibly none or all of them) in such a way that the total number of different integers written on the cards is less than or equal to K. Return the total number of ways to do that.
	// 
	// 
	// DEFINITION
	// Class:TaroCards
	// Method:getNumber
	// Parameters:int[], int[], int
	// Returns:long
	// Method signature:long getNumber(int[] first, int[] second, int K)
	// 
	// 
	// CONSTRAINTS
	// -first will contain between 1 and 50 elements, inclusive.
	// -first and second will contain the same number of elements.
	// -first will represent a permutation of integers between 1 and N, inclusive, where N is the number of elements in first.
	// -Each element of second will be between 1 and 10, inclusive.
	// -K will be between 1 and 2N, inclusive, where N is the number of elements in first.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1, 2}
	// {2, 3}
	// 2
	// 
	// Returns: 3
	// 
	// In this case, there are four subsets of cards:
	// 
	// 
	// None of the cards. The number of different integers is 0.
	// 
	// 
	// Only the first card. The number of different integers is 2.
	// 
	// 
	// Only the second card. The number of different integers is 2.
	// 
	// 
	// Both the first and the second card. The number of different integers is 3.
	// 
	// 
	// However, the last subset has too many different integers. Thus, the answer is 3.
	// 
	// 1)
	// {3, 1, 2}
	// {1, 1, 1}
	// 3
	// 
	// Returns: 8
	// 
	// 
	// 
	// 2)
	// {4, 2, 1, 3}
	// {1, 2, 3, 4}
	// 5
	// 
	// Returns: 16
	// 
	// 
	// 
	// 3)
	// {1, 2, 3, 4, 5, 6, 7}
	// {2, 1, 10, 9, 3, 2, 2}
	// 3
	// 
	// Returns: 17
	// 
	// 
	// 
	// 4)
	// {1}
	// {2}
	// 1
	// 
	// Returns: 1
	// 
	// 
	// 
	// 5)
	// {6, 20, 1, 11, 19, 14, 2, 8, 15, 21, 9, 10, 4, 16, 12, 17, 13, 22, 7, 18, 3, 5}
	// {4, 5, 10, 7, 6, 2, 1, 10, 10, 7, 9, 4, 5, 9, 5, 10, 10, 3, 6, 6, 4, 4}
	// 14
	// 
	// Returns: 2239000
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
