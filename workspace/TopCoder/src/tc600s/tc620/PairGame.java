package tc600s.tc620;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.awt.Point;
import java.math.*;


public class PairGame
{
	public int maxSum(int a, int b, int c, int d)
	{
		HashSet<Pair> aset = new HashSet<>();
		HashSet<Pair> cset = new HashSet<>();
		search(a,b,aset);
		search(c,d,cset);
		
		int ret = 0;
		boolean ok = false;
		for (Pair ap : aset) {
			if (cset.contains(ap)) {
				ret = Math.max(ret, ap.a + ap.b);
				ok = true;
			}
		}
		
		return ok ? ret : -1;
	}
	
	
	public void search(int a, int b, HashSet<Pair> set) {
		Pair p = new Pair(a,b);
		set.add(new Pair(a,b));
		while(p.a != 0 && p.b != 0) {
			if (p.a < p.b) {
				p.b -= p.a;
				set.add(new Pair(p.a, p.b));
			} else if (p.a > p.b) {
				p.a -= p.b;
				set.add(new Pair(p.a, p.b));
			} else {
				set.add(new Pair(p.a,0));
				set.add(new Pair(0,p.b));
				p.a = 0;
				p.b = 0;
			}
		}
	}
	
	
	class Pair {
		int a;
		int b;

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + a;
			result = prime * result + b;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Pair other = (Pair) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (a != other.a)
				return false;
			if (b != other.b)
				return false;
			return true;
		}

		Pair(int a, int b) {
			this.a = a;
			this.b = b;
		}

		private PairGame getOuterType() {
			return PairGame.this;
		}
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, int p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
		System.out.println("]");
		PairGame obj;
		int answer;
		obj = new PairGame();
		long startTime = System.currentTimeMillis();
		answer = obj.maxSum(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p4;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 1;
		p1 = 2;
		p2 = 2;
		p3 = 1;
		p4 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 15;
		p1 = 4;
		p2 = 10;
		p3 = 7;
		p4 = 7;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 1;
		p1 = 1;
		p2 = 10;
		p3 = 10;
		p4 = -1;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 1000;
		p1 = 1001;
		p2 = 2000;
		p3 = 2001;
		p4 = 1001;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 10944;
		p1 = 17928;
		p2 = 7704;
		p3 = 21888;
		p4 = 144;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = 1;
		p1 = 1;
		p2 = 1;
		p3 = 1;
		p4 = 2;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// In this problem we consider ordered pairs of positive integers. Given such a pair, you can now make zero or more steps.
	// In each step, you can change your pair into a new pair of integers by adding one of them to the other.
	// That is, if your current pair is (x, y), then your next pair will be either (x+y, y), or (x, x+y).
	// 
	// 
	// 
	// For example, you can start with (1, 2), change it to (3, 2), change that to (3, 5), and then change that again to (3, 8).
	// 
	// 
	// 
	// You are given four ints: a, b, c, and d.
	// We are looking for a pair (x, y) such that:
	// 
	// It is possible to start with (x, y) and end with (a, b).
	// It is also possible to start with the same (x, y) and end with (c, d).
	// 
	// The number of steps needed to reach (a, b) may be different from the number of steps needed to reach (c, d).
	// 
	// 
	// 
	// If there is at least one such pair (x, y), return the largest possible value of x+y.
	// Otherwise, return -1.
	// 
	// DEFINITION
	// Class:PairGame
	// Method:maxSum
	// Parameters:int, int, int, int
	// Returns:int
	// Method signature:int maxSum(int a, int b, int c, int d)
	// 
	// 
	// CONSTRAINTS
	// -a will be between 1 and 1,000,000, inclusive.
	// -b will be between 1 and 1,000,000, inclusive.
	// -c will be between 1 and 1,000,000, inclusive.
	// -d will be between 1 and 1,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 1
	// 2
	// 2
	// 1
	// 
	// Returns: 2
	// 
	// We have (1,1) -> (1,2) and (1,1) -> (2,1).
	// 
	// 
	// 1)
	// 15
	// 4
	// 10
	// 7
	// 
	// Returns: 7
	// 
	// Now we have (3,4) -> (7,4) -> (11,4) -> (15,4) and (3,4) -> (3,7) -> (10,7).
	// 
	// 2)
	// 1
	// 1
	// 10
	// 10
	// 
	// Returns: -1
	// 
	// 
	// 
	// 3)
	// 1000
	// 1001
	// 2000
	// 2001
	// 
	// Returns: 1001
	// 
	// 
	// 
	// 4)
	// 10944
	// 17928
	// 7704
	// 21888
	// 
	// Returns: 144
	// 
	// 
	// 
	// 5)
	// 1
	// 1
	// 1
	// 1
	// 
	// Returns: 2
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
