package tc600s.tc632;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PotentialArithmeticSequence
{
	public int numberOfSubsequences(int[] d)
	{
		int ret = 0;
		for (int i=0; i<d.length; i++) {
			for (int j=i; j<d.length; j++) {
				if (j == i) {
					ret++;
					continue;
				}
				
				// find max
				int pos = i;
				int morethan8 = 0;
				for (int k=i; k<=j; k++) {
					if (d[pos] < d[k]) {
						pos = k;
					}
					if (d[k] > 8) {
						morethan8++;
					}
				}
				if (d[pos] == 0) continue;
				if (morethan8 > 8) continue;
				
				// check right
				boolean bad = false;
				int num = 2048;
				if (d[pos] < 10 ) {
					num = (int) Math.pow(2, d[pos]);
				}
				for (int k=pos+1; k<=j; k++) {
					num++;
					int trail = Integer.numberOfTrailingZeros(num);
					trail = trail == 32 ? 0 : trail;
					if (d[k] != trail) {
						bad = true;
						break;
					}
				}
				if (bad) continue;
				
				// check left
				num = 2048; //111 1111 1111
				for (int k=pos-1; k>=i; k--) {
					num--;
					int trail = Integer.numberOfTrailingZeros(num);
					trail = trail == 32 ? 0 : trail;
					if (d[k] != trail) {
						bad = true;
						break;
					}
				}
				if (!bad) ret++;
			}
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		PotentialArithmeticSequence obj;
		int answer;
		obj = new PotentialArithmeticSequence();
		long startTime = System.currentTimeMillis();
		answer = obj.numberOfSubsequences(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{0,1,0,2,0,1,0};
		p1 = 28;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{0,0,0,0,0,0,0};
		p1 = 7;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{0,0,0,0,1,1,1};
		p1 = 8;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{0,100,0,2,0};
		p1 = 11;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{1,11,3,0,1,0,1,0,1,0,1,0,3,0,2,0,0,0,0,1,2,3,20};
		p1 = 49;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// We have a sequence of N positive integers: a[0] through a[N-1].
	// You do not know these integers.
	// All you know is the number of trailing zeros in their binary representations.
	// You are given a int[] d with N elements.
	// For each i, d[i] is the number of trailing zeros in the binary representation of a[i].
	// 
	// 
	// 
	// For example, suppose that a[0]=40.
	// In binary, 40 is 101000 which ends in three zeros.
	// Therefore, d[0] will be 3.
	// 
	// 
	// 
	// You like arithmetic sequences with difference 1.
	// (That is, sequences in which each element is 1 greater than the previous one. For example, {4,5,6,7}.)
	// For simplicity, we will call these sequences "incrementing sequences".
	// 
	// 
	// 
	// You would like to count all non-empty contiguous subsequences of the sequence a[0], a[1], ..., a[N-1] that can be incrementing sequences (given the information you have in d).
	// 
	// 
	// 
	// More precisely:
	// For each pair (i,j) such that 0 <= i <= j <= N-1, we ask the following question: "Given the values d[i] through d[j], is it possible that the values a[i] through a[j] form an incrementing sequence?"
	// 
	// 
	// 
	// For example, suppose that d = {0,1,0,2,1}.
	// For i=0 and j=3 the answer is positive: it is possible that the values a[0] through a[3] are {1,2,3,4} which is an incrementing sequence.
	// For i=1 and j=4 the answer is negative: there is no incrementing sequence with these numbers of trailing zeros in binary.
	// 
	// 
	// 
	// Compute and return the number of contiguous subsequences of a[0], a[1], ..., a[N-1] that can be incrementing sequences.
	// 
	// 
	// DEFINITION
	// Class:PotentialArithmeticSequence
	// Method:numberOfSubsequences
	// Parameters:int[]
	// Returns:int
	// Method signature:int numberOfSubsequences(int[] d)
	// 
	// 
	// CONSTRAINTS
	// -n will be between 1 and 50, inclusive.
	// -d will contain exactly N elements.
	// -Each element of d will be between 0 and 1,000,000,000 (10^9), inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {0,1,0,2,0,1,0}
	// 
	// Returns: 28
	// 
	// It is possible that the sequence a[0] through a[6] is {1,2,3,4,5,6,7}. All contiguous subsequences of this sequence are incrementing sequences.
	// 
	// 1)
	// {0,0,0,0,0,0,0}
	// 
	// Returns: 7
	// 
	// 
	// 
	// 2)
	// {0,0,0,0,1,1,1}
	// 
	// Returns: 8
	// 
	// 
	// 
	// 3)
	// {0,100,0,2,0}
	// 
	// Returns: 11
	// 
	// 
	// 
	// 4)
	// {1,11,3,0,1,0,1,0,1,0,1,0,3,0,2,0,0,0,0,1,2,3,20}
	// 
	// Returns: 49
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
