package tc600s.tc632;

import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class GoodSubset
{
	final int MOD = 1_000_000_007;
	public int numberOfSubsets(int goodValue, int[] d)
	{
		HashMap<Integer, Integer> map = new HashMap<>(); //prod, sets
		for (int i = 0; i < d.length; i++) {
			HashMap<Integer, Integer> nmap = new HashMap<>();
			nmap.put(d[i], 1);
			for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
				//not use
				Integer setcount = nmap.get(entry.getKey());
				if (setcount == null) setcount = 0;
				setcount = (entry.getValue() + setcount) % MOD;
				
				nmap.put(entry.getKey(), setcount);
				
				//use
				int nprod = entry.getKey();
				if (nprod > goodValue / d[i]) continue;
				nprod *= d[i];
				if (goodValue % nprod != 0) continue;
				
				setcount = nmap.get(nprod);
				if (setcount == null) setcount = 0;
				setcount = (entry.getValue() + setcount) % MOD;
				nmap.put(nprod, setcount);
			}
			map = nmap;
		}
		return map.get(goodValue) == null ? 0 : map.get(goodValue);
	}
	
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		GoodSubset obj;
		int answer;
		obj = new GoodSubset();
		long startTime = System.currentTimeMillis();
		answer = obj.numberOfSubsets(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 10;
		p1 = new int[]{2,3,4,5};
		p2 = 1;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 6;
		p1 = new int[]{2,3,4,5,6};
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 1;
		p1 = new int[]{1,1,1};
		p2 = 7;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 12;
		p1 = new int[]{1,2,3,4,5,6,7,8,9,10,11,12};
		p2 = 6;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 5;
		p1 = new int[]{1,2,3,4};
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		// ----- test 4 -----
		disabled = false;
		p0 = 1874919424;
		p1 = new int[]{100000000, 100000000};	
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// You have some cards, each containing a positive integer.
	// You are given a int[] d.
	// Each element of d is one of those integers.
	// The integers are not necessarily distinct.
	// 
	// 
	// 
	// You are also given an int goodValue.
	// You are interested in non-empty subsets of cards with the following property:
	// The product of integers written on those cards is exactly equal to goodValue.
	// 
	// 
	// 
	// Let X be the number of subsets with the above property.
	// Compute and return the value (X modulo 1,000,000,007).
	// 
	// 
	// DEFINITION
	// Class:GoodSubset
	// Method:numberOfSubsets
	// Parameters:int, int[]
	// Returns:int
	// Method signature:int numberOfSubsets(int goodValue, int[] d)
	// 
	// 
	// CONSTRAINTS
	// -goodValue will be between 1 and 2,000,000,000, inclusive.
	// -d will contain between 1 and 100 elements, inclusive.
	// -Each element of d will be between 1 and 2,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 10
	// {2,3,4,5}
	// 
	// Returns: 1
	// 
	// There is only one good subset:{2,5}.
	// 
	// 1)
	// 6
	// {2,3,4,5,6}
	// 
	// Returns: 2
	// 
	// There are two good subsets: {2,3} and {6}.
	// 
	// 2)
	// 1
	// {1,1,1}
	// 
	// Returns: 7
	// 
	// All non-empty subsets of this set of cards are good.
	// 
	// 3)
	// 12
	// {1,2,3,4,5,6,7,8,9,10,11,12}
	// 
	// Returns: 6
	// 
	// 
	// 
	// 4)
	// 5
	// {1,2,3,4}
	// 
	// Returns: 0
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
