package tc600s.tc623;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class UniformBoard
{
	public final int INF = 1<<30;
	public int getBoard(String[] board, int K)
	{
		int len = board.length;
		boolean cantmove = true;
		int applecount = 0;
		int[][] cum = new int[len][len]; //needed cost to make it all apple
		//precalc
		for (int i=0; i<len; i++) {
			for (int j=0; j<len; j++) {
				if (i != 0) cum[i][j] += cum[i-1][j];
				if (j != 0) cum[i][j] += cum[i][j-1];
				if (i != 0 && j != 0) cum[i][j] -= cum[i-1][j-1];
				if (board[i].charAt(j) == '.') {
					cantmove = false;
					cum[i][j] += 1;
				}
				if (board[i].charAt(j) == 'P') cum[i][j] += 2;
				if (board[i].charAt(j) == 'A') applecount++;
			}
		}
		if (cantmove) K = 0;
		
		int ret = 0;
		//calc
		for (int i=0; i<len; i++) {
			for (int j=i; j<len; j++) {
				for (int k=0; k<len; k++) {
					for (int l=k; l<len; l++) {
						int area = (j-i+1) * (l-k+1);
						if (area > applecount) continue;
						int move = cum[j][l];
						if (i != 0) move -= cum[i-1][l];
						if (k != 0) move -= cum[j][k-1];
						if (i != 0 && k != 0) move += cum[i-1][k-1];
						if (move <= K) {
							ret = Math.max(ret, area);
						}
					}
				}
			}
		}
		
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		UniformBoard obj;
		int answer;
		obj = new UniformBoard();
		long startTime = System.currentTimeMillis();
		answer = obj.getBoard(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new String[]{"AP",".A"};
		p1 = 0;
		p2 = 1;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new String[]{"AP",".A"};
		p1 = 1;
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new String[]{"PPP","APA","A.P"};
		p1 = 2;
		p2 = 3;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new String[]{"AAA","PPP","AAA"};
		p1 = 10;
		p2 = 3;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new String[]{"."};
		p1 = 1000;
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new String[]{"PPAAPA..AP","PPA.APAP..","..P.AA.PPP","P.P..APAA.","P.P..P.APA","PPA..AP.AA","APP..AAPAA","P.P.AP...P",".P.A.PAPPA","..PAPAP..P"};
		p1 = 10;
		p2 = 15;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A square board is divided into N rows by N columns of unit square cells.
	// Some cells of the board are empty.
	// Each of the other cells contains either an apple or a pear.
	// You are given the current state of the board as a String[] board.
	// In board, the character '.' denotes an empty cell, 'A' denotes an apple, and 'P' denotes a pear.
	// 
	// You are allowed to perform at most K moves.
	// In each move, you can pick up one fruit (an apple or a pear) and place it onto any empty cell.
	// (The new cell doesn't have to be adjacent to the old one.)
	// Note that you cannot remove fruit from the board, you are only allowed to move it onto different cells.
	// 
	// A rectangular section of the board is called uniform if each cell in the rectangle contains an apple. After you are done moving the fruit, you want to have a uniform rectangle that is as large as possible somewhere on the board.
	// Return the largest possible area of such a rectangle. If there are no apples, return 0.
	// 
	// DEFINITION
	// Class:UniformBoard
	// Method:getBoard
	// Parameters:String[], int
	// Returns:int
	// Method signature:int getBoard(String[] board, int K)
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 20, inclusive.
	// -board will contain exactly N elements.
	// -Each element of board will contain exactly N characters.
	// -Each character in board will be '.', 'A', or 'P'.
	// -K will be between 0 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"AP",
	//  ".A"}
	// 0
	// 
	// Returns: 1
	// 
	// You cannot move anything.
	// The largest uniform rectangle on the board is a 1x1 rectangle that consists of a single cell with an apple.
	// 
	// 1)
	// {"AP",
	//  ".A"}
	// 1
	// 
	// Returns: 2
	// 
	// You are allowed to make one move.
	// You can move one of the apples onto the currently empty cell, thus creating a 1x2 rectangle of apples.
	// 
	// 2)
	// {"PPP",
	//  "APA",
	//  "A.P"}
	// 2
	// 
	// Returns: 3
	// 
	// In two moves you can create a 1x3 rectangle of apples.
	// 
	// 3)
	// {"AAA",
	//  "PPP",
	//  "AAA"}
	// 10
	// 
	// Returns: 3
	// 
	// You are allowed to make at most 10 moves.
	// However, you cannot make any moves because there are no empty cells.
	// 
	// 4)
	// {"."}
	// 1000
	// 
	// Returns: 0
	// 
	// 
	// 
	// 5)
	// {"PPAAPA..AP",
	//  "PPA.APAP..",
	//  "..P.AA.PPP",
	//  "P.P..APAA.",
	//  "P.P..P.APA",
	//  "PPA..AP.AA",
	//  "APP..AAPAA",
	//  "P.P.AP...P",
	//  ".P.A.PAPPA",
	//  "..PAPAP..P"}
	// 10
	// 
	// Returns: 15
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
