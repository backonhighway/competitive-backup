package tc600s.tc619;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class EmployManager
{
	public int maximumEarnings(int[] cost, String[] earning)
	{
		int len = cost.length;
		int[] earn = new int[len];
		int ret = 0;
		for (int i = 0; i < len; i++) {
			for (int j = 0; j < len; j++) {
				earn[i] += earning[i].charAt(j) - '0';
				if (j < i) ret -= earning[i].charAt(j) - '0';
			}
		}

		for (int i = 0; i < len; i++) {
			if (cost[i] < earn[i]) ret += earn[i] - cost[i];
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, String[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		EmployManager obj;
		int answer;
		obj = new EmployManager();
		long startTime = System.currentTimeMillis();
		answer = obj.maximumEarnings(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		String[] p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1,1};
		p1 = new String[]{"02","20"};
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{2,2};
		p1 = new String[]{"01","10"};
		p2 = -1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{1,2,3,4};
		p1 = new String[]{"0121","1021","2201","1110"};
		p2 = -1;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{2,2,0,1,4,0,1,0,0,4};
		p1 = new String[]{"0100451253","1010518123","0102989242","0020093171","4590045480","5189400676","1893500826","2121468008","5247872007","3321066870"};
		p2 = 156;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Shiny wants to hire some managers for her company.
	// There are N candidates, numbered 0 through N-1.
	// She can employ any subset of these candidates, including possibly none or all of them.
	// 
	// For each of the candidates we know an amount in dollars Shiny must pay if she wants to hire that candidate.
	// You are given a int[] value with N elements.
	// For each i, value[i] is the amount in dollars Shiny has to pay if she wants to hire candidate i.
	// 
	// For each pair i < j of candidates we also know a value E(i,j) with the following meaning:
	// 
	// If both i and j are employed, the company will earn E(i,j) dollars.
	// However, if neither i nor j are employed, they will cooperate to harm the company, which will cost the company E(i,j) dollars.
	// 
	// If one of them is employed and the other isn't, nothing happens.
	// All the values E(i,j) are between 0 and 9, inclusive.
	// 
	// For your convenience, we also define E(i,i)=0 and E(j,i)=E(i,j) for all i and j.
	// 
	// You are given the above values E(i,j) encoded as a String[] earning with N elements, each consisting of N characters.
	// For each i and j, earning[i][j] is the character ('0'-'9') that represents the value E(i,j).
	// 
	// You are given the int[] value and the String[] earning.
	// Compute and return the largest total profit (i.e., earnings minus costs) the company can obtain by hiring a suitable subset of candidates.
	// 
	// 
	// 
	// DEFINITION
	// Class:EmployManager
	// Method:maximumEarnings
	// Parameters:int[], String[]
	// Returns:int
	// Method signature:int maximumEarnings(int[] value, String[] earning)
	// 
	// 
	// CONSTRAINTS
	// -value will contain between 1 and 50 elements, inclusive.
	// -earning will contain the same number of elements as value.
	// -The length of each element of earning will be the same as the number of elements in value.
	// -Each character in each element of earning will be a digit ('0'-'9').
	// -Each element of value will be between 0 and 1000, inclusive.
	// -For each i, earning[i][i] will be '0'.
	// -For each i and j, earning[i][j] will be equal to earning[j][i].
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1, 1}
	// {"02", "20"}
	// 
	// Returns: 0
	// 
	// Hiring both managers is the optimal solution in this example.
	// 
	// 1)
	// {2, 2}
	// {"01", "10"}
	// 
	// Returns: -1
	// 
	// Here it is best not to hire any manager.
	// 
	// 2)
	// {1, 2, 3, 4}
	// {"0121", "1021", "2201", "1110"}
	// 
	// Returns: -1
	// 
	// 
	// 
	// 3)
	// {2, 2, 0, 1, 4, 0, 1, 0, 0, 4}
	// {"0100451253",  "1010518123",  "0102989242",  "0020093171",  "4590045480",  "5189400676",  "1893500826",  "2121468008",  "5247872007",  "3321066870"}
	// 
	// Returns: 156
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
