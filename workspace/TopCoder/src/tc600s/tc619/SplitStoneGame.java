package tc600s.tc619;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SplitStoneGame
{
	public String winOrLose(int[] number)
	{
		int count = 0;
		int len = number.length;
		for (int i = 0; i < len; i++) {
			if (number[i] > 1) count++;
		}
		if (count < 1) return "LOSE";
		if (len == 1) return "LOSE";
		return len % 2 == 1 ? "WIN" : "LOSE";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SplitStoneGame obj;
		String answer;
		obj = new SplitStoneGame();
		long startTime = System.currentTimeMillis();
		answer = obj.winOrLose(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		String p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1,1,1};
		p1 = "LOSE";
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{2,2};
		p1 = "LOSE";
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{1,1,2};
		p1 = "WIN";
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{1,2,3,4,3,2,2,4,3,1,4,4,1,2,4,4,1,4,3,1,4,2,1};
		p1 = "WIN";
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{1,1,1,1,1,1,1,1,1,1,2,1,1,1,3,1,9,1,3,1,1,1,1,1};
		p1 = "LOSE";
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Shiny likes to play games.
	// Her favorite games are games with pebbles (small stones).
	// Today, she is playing such a game with her friend Lucy.
	// 
	// Initially, there are N piles of stones.
	// You are given a int[] number with N elements.
	// Each element of number is the number of stones in one of the piles.
	// 
	// The players take alternating turns.
	// Shiny plays first.
	// In each turn, the current player must:
	// 
	// Choose a pile X that has at least two stones.
	// Split the chosen pile X into two non-empty parts A and B. (The parts can have arbitrary sizes, as long as both are non-empty.)
	// Choose two piles Y and Z. (Y and Z must be different non-empty piles other than X.)
	// Add all stones from A to the pile Y, and all stones from B to the pile Z.
	// 
	// 
	// For example, if the current piles are {1, 2, 50}, the current player could:
	// 
	// Choose the pile with 50 stones as X.
	// Split it into two parts with 25 stones each.
	// Choose the other two piles (the ones with 1 and 2 stones) to be Y and Z.
	// Add all stones from A to the pile Y, and all stones from B to the pile Z. At the end of the turn, there are two piles of stones: one with 26 and one with 27 stones.
	// 
	// 
	// The player who cannot make a valid move loses the game.
	// Assume that both players play the game optimally.
	// Return the String "WIN" (quotes for clarity) if Shiny wins the game, and "LOSE" if she does not.
	// 
	// 
	// DEFINITION
	// Class:SplitStoneGame
	// Method:winOrLose
	// Parameters:int[]
	// Returns:String
	// Method signature:String winOrLose(int[] number)
	// 
	// 
	// CONSTRAINTS
	// -number will contain between 1 and 50 elements, inclusive.
	// -Each element of number will be between 1 and 50, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1, 1, 1}
	// 
	// Returns: "LOSE"
	// 
	// Shiny can't choose a pile X that has at least two stones, so she loses.
	// 
	// 1)
	// {2, 2}
	// 
	// Returns: "LOSE"
	// 
	// After Shiny chooses one of the piles as X and splits it into two piles with one stone each, she is
	// unable to choose Y and Z, because there is only one pile left to choose from at the moment. Thus,
	// she cannot make a valid move and therefore she loses the game.
	// 
	// 2)
	// {1, 1, 2}
	// 
	// Returns: "WIN"
	// 
	// Shiny can choose the last pile as X, split it into 1+1 stone, and add those stones to the other two
	// piles. This is a valid move that produces two piles with two stones each, and it is now Lucy's turn. 
	// As we saw in Example 1, Lucy now has no valid move left, thus she loses the game and Shiny is the
	// winner.
	// 
	// 3)
	// {1, 2, 3, 4, 3, 2, 2, 4, 3, 1, 4, 4, 1, 2, 4, 4, 1, 4, 3, 1, 4, 2, 1}
	// 
	// Returns: "WIN"
	// 
	// 
	// 
	// 4)
	// {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 9, 1, 3, 1, 1, 1, 1, 1}
	// 
	// Returns: "LOSE"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
