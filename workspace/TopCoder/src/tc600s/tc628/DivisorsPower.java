package tc600s.tc628;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class DivisorsPower
{
	public long findArgument(long n)
	{
		for (int d=2; d<=60; d++) {
			long x = getRoot(d, n);
			if (getDivisors(x) == d) {
				return x;
			}
		}
		return -1;
	}
	
	/**
	 * @return x such that x^d = n
	 */
	public long getRoot(long d, long n) {
		long lo = 1; //include
		long hi = n+1; //exlude
		long mid = lo;
		while (lo + 1 < hi) {
			mid = lo + (hi - lo) / 2;
			if (check(mid, d, n) <= n) {
				lo = mid;
			} else {
				hi = mid;
			}
		}
		
		return check(lo, d, n) == n ? lo : -1;
	}
	
	public long check(long mid, long d, long n) {
		long p = 1;
		for (int i=1; i<=d; i++) {
			if (p > n/mid) return n+1;
			p *= mid;
		}
		return p;
	}
	
	public long getDivisors(long x) {
		long p = 1;
		long c = 0;
		while (p <= x/p) {
			if (x % p == 0) {
				c++;
				if (x/p != p) {
					c++;
				}
			}
			p++;
		}
		
		return c;
	}
	
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, long p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		DivisorsPower obj;
		long answer;
		obj = new DivisorsPower();
		long startTime = System.currentTimeMillis();
		answer = obj.findArgument(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		long p0;
		long p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = 4L;
		p1 = 2L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = 10L;
		p1 = -1L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = 64L;
		p1 = 4L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = 10000L;
		p1 = 10L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = 2498388559757689L;
		p1 = 49983883L;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Halina is a young mathematician.
	// Recently she has been studying an interesting function h that operates on positive integers.
	// 
	// Let d(n) be the number of distinct positive divisors of n.
	// The function h is then defined as follows: for each n we have h(n) = n^d(n).
	// In words, h(n) is defined as n to the power of d(n).
	// 
	// For example, d(6)=4 because 6 is divisible by 1, 2, 3, and 6.
	// Then, h(6) = 6^4 = 1296.
	// 
	// Halina already knows how to compute her function h.
	// Now she would like to compute the inverse function.
	// Help her!
	// 
	// You are given a long n.
	// Return the smallest x such that h(x) = n.
	// If there is no such x, return -1 instead.
	// 
	// DEFINITION
	// Class:DivisorsPower
	// Method:findArgument
	// Parameters:long
	// Returns:long
	// Method signature:long findArgument(long n)
	// 
	// 
	// CONSTRAINTS
	// -n will be between 2 and 10^18, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 4
	// 
	// Returns: 2
	// 
	// d(2) = 2, h(2) = 4
	// 
	// 1)
	// 10
	// 
	// Returns: -1
	// 
	// There is no x satisfying h(x) = 10.
	// 
	// 2)
	// 64
	// 
	// Returns: 4
	// 
	// d(4) = 3, h(4) = 64
	// 
	// 3)
	// 10000
	// 
	// Returns: 10
	// 
	// d(10) = 4, h(10) = 10000
	// 
	// 4)
	// 2498388559757689
	// 
	// Returns: 49983883
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
