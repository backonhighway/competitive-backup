package tc600s.tc628;

import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class InvariantSets
{
	int[] f;
	int[] rooted;
	boolean[] visited;
	int len;
	HashMap<Integer, List<Integer>> map = new HashMap<>();
			
	public long countSets(int[] f)
	{
		this.f = f;
		len = f.length;
		rooted = new int[len];
		Arrays.fill(rooted, -1);
		
		// merge the rings
		for (int i = 0; i < len; i++) {
			makeGroup(i);
			if (rooted[i] == -1) rooted[i] = i;
		}
		
		System.out.println(Arrays.toString(rooted));
		
		for (int i = 0; i < len; i++) {
			if (rooted[i] != i) continue;
			List<Integer> list = map.get(rooted[f[i]]);
			if (list == null) list = new ArrayList<>();
			list.add(i);
			map.put(rooted[f[i]], list);
		}
		
		
		long ret = 1;
		for (int i = 0; i < len; i++) {
			if (i == rooted[f[i]]) ret *= dfs(i);
		}
		
		return ret;
	}
	
	public long dfs(int index) {
		List<Integer> list = map.get(index);
		if (list == null) return 2;
		
		//dont use
		long ret = 1;
		
		//use
		long temp = 1;
		for (int i : list) {
			if (i == index) continue;
			temp *= dfs(i);
		}
		return ret + temp;
	}
	
	public boolean isCycle(int root, int index) {
		if (root == index) return true;
		if (visited[index]) return false;
		visited[index] = true;
		return isCycle(root, f[index]);
	}
	
	public void markCircle(int root, int index) {
		if (rooted[index] != -1) return;
		rooted[index] = root;
		markCircle(root, f[index]);
	}
	
	public void makeGroup(int index) {
		if (rooted[index] != -1) return;
		visited = new boolean[len];
		if (isCycle(index, f[index])) {
			markCircle(index, index);
		}
	}
	
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		InvariantSets obj;
		long answer;
		obj = new InvariantSets();
		long startTime = System.currentTimeMillis();
		answer = obj.countSets(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		long p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1,0,0,0};
		p1 = 5L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{1,2,0};
		p1 = 2L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{0,0,1,2};
		p1 = 5L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{0,1,2,3,4,5};
		p1 = 64L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{12,10,0,4,0,6,3,8,9,14,1,5,6,12,5};
		p1 = 90L;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Janusz is a young physicist.
	// Recently he has been studying a dynamic system.
	// There are n elements in the system.
	// We will label them 0 through n-1.
	// The set of all elements will be denoted E.
	// 
	// Janusz models the changes in his system using a function that operates on elements of E.
	// You are given this function as a int[] f with n elements, each between 0 and n-1, inclusive.
	// The int[] f describes Janusz's function as follows:
	// For each valid i, if the function is given the input i, its output will be f[i].
	// 
	// For Janusz, invariant subsets of E have a special significance.
	// A subset S of the set E is called invariant (with respect to f) if it has the following property: for any x in S, f[x] is also in S.
	// For example, the entire set E is invariant (for any f).
	// The empty set is always invariant as well.
	// 
	// Given is the int[] f.
	// Compute and return the number of invariant subsets of E (including E itself and the empty set).
	// 
	// DEFINITION
	// Class:InvariantSets
	// Method:countSets
	// Parameters:int[]
	// Returns:long
	// Method signature:long countSets(int[] f)
	// 
	// 
	// NOTES
	// -You may assume that the return value will fit into integer type long.
	// 
	// 
	// CONSTRAINTS
	// -f will have between 1 and 50 elements, inclusive.
	// -Each element of f will be between 0 and n-1, inclusive, where n is the number of elements of f.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,0,0,0}
	// 
	// Returns: 5
	// 
	// The invariant sets are: {}, {0,1}, {0,1,2}, {0,1,3}, {0,1,2,3}.
	// 
	// 1)
	// {1,2,0}
	// 
	// Returns: 2
	// 
	// There are only 2 invariants sets: {} and {0,1,2}.
	// 
	// 2)
	// {0,0,1,2}
	// 
	// Returns: 5
	// 
	// The invariant sets are: {}, {0}, {0,1}, {0,1,2}, {0,1,2,3}.
	// 
	// 3)
	// {0,1,2,3,4,5}
	// 
	// Returns: 64
	// 
	// Every set is invariant when f(x)=x for all x.
	// 
	// 4)
	// {12, 10, 0, 4, 0, 6, 3, 8, 9, 14, 1, 5, 6, 12, 5}
	// 
	// Returns: 90
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
