package tc500s.tc598;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class BinPacking
{
	public int minBins(int[] item)
	{
		int len = item.length;
		Arrays.sort(item);

		boolean[] used = new boolean[len];
		int count = 0;
		
		//put first
		for (int i = len-1; i >= 0; i--) {
			if (used[i]) continue;
			used[i] = true;
			count++;
			int cap = item[i];
			
			//put them in
			for (int j = len-1; j >= 0; j--) {
				if (used[j]) continue;
				if (cap + item[j] <= 300) {
					used[j] = true;
					cap += item[j];
				}
			}
		}
		return count;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		BinPacking obj;
		int answer;
		obj = new BinPacking();
		long startTime = System.currentTimeMillis();
		answer = obj.minBins(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{150,150,150,150,150};
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{130,140,150,160};
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{100,100,100,100,100,100,100,100,100};
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{100,200,100,100,100,100,200,100,200};
		p1 = 4;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{157,142,167,133,135,157,143,160,141,123,162,159,165,137,138,152};
		p1 = 8;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Ciel has some items. The weight of the i-th (0-based) item is item[i]. She wants to put all items into bins.
	// 
	// 
	// The capacity of each bin is 300. She can put an arbitrary number of items into a single bin, but the total weight of items in a bin must be less than or equal to 300.
	// 
	// 
	// You are given the int[] item. It is known that the weight of each item is between 100 and 300, inclusive. Return the minimal number of bins required to store all items.
	// 
	// 
	// DEFINITION
	// Class:BinPacking
	// Method:minBins
	// Parameters:int[]
	// Returns:int
	// Method signature:int minBins(int[] item)
	// 
	// 
	// CONSTRAINTS
	// -item will contain between 1 and 50 elements, inclusive.
	// -Each element of item will be between 100 and 300, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {150, 150, 150, 150, 150}
	// 
	// Returns: 3
	// 
	// You have five items and each bin can hold at most two of them. You need at least three bins.
	// 
	// 1)
	// {130, 140, 150, 160}
	// 
	// Returns: 2
	// 
	// For example, you can distribute the items in the following way:
	// 
	// Bin 1: 130, 150
	// Bin 2: 140, 160
	// 
	// 
	// 
	// 2)
	// {100, 100, 100, 100, 100, 100, 100, 100, 100}
	// 
	// Returns: 3
	// 
	// 
	// 
	// 3)
	// {100, 200, 100, 100, 100, 100, 200, 100, 200}
	// 
	// Returns: 4
	// 
	// 
	// 
	// 4)
	// {157, 142, 167, 133, 135, 157, 143, 160, 141, 123, 162, 159, 165, 137, 138, 152}
	// 
	// Returns: 8
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
