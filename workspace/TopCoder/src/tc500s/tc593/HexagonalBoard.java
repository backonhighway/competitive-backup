package tc500s.tc593;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class HexagonalBoard
{
	int[][] color;
	int[] dx = {0, 1, -1, 1, -1, 0};
	int[] dy = {-1, -1, 0, 0, 1, 1};
	int len;
	String[] board;
	boolean isAtleast2 = false;
	
	public int minColors(String[] board)
	{
		this.len = board.length;
		this.color = new int[len][len];
		this.board = board;

		boolean two = true;
		boolean atleast1 = false;
		
		for (int y = 0; y < len; y++) {
			for (int x = 0; x < len; x++) {
				if (board[y].charAt(x) != 'X') continue;
				
				atleast1 = true;
				if (color[y][x] == 0) {
					two &= dfs(x, y, 1);
				}
			}
		}
		if (!atleast1) return 0;
		if (!isAtleast2) return 1;
		if (two) return 2;
		return 3;
	}
	
	public boolean dfs(int x, int y, int c) {
		color[y][x] = c;
		for (int i = 0; i < 6; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || nx >= len || ny < 0 || ny >= len) continue;
			if (board[ny].charAt(nx) != 'X') continue;
			
			if (color[ny][nx] == c) {
				return false;
			}
			if (color[ny][nx] == 0) {
				if (dfs(nx, ny, -c) == false) return false;
			}
			if (color[ny][nx] == -c) {
				isAtleast2 = true;
			}
		}
		return true;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		HexagonalBoard obj;
		int answer;
		obj = new HexagonalBoard();
		long startTime = System.currentTimeMillis();
		answer = obj.minColors(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new String[]{"---","---","---"};
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new String[]{"-X--","---X","----","-X--"};
		p1 = 1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new String[]{"XXXX","---X","---X","---X"};
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new String[]{"XX-XX--","-XX-XXX","X-XX--X","X--X-X-","XX-X-XX","-X-XX-X","-XX-XX-"};
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new String[]{"XXXX","XXXX","XXXX","XXXX"};
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// The pony Applejack has an N by N hexagonal board. The following picture shows the hexagonal board when N = 1, 2, 3, and 4.
	// 
	// 
	// 
	// 
	// 
	// She wants to color some cells of the board. You are given a String[] board. If the j-th character of the i-th element of board is 'X', she wants to color the cell (i, j). If she colors two cells that share an edge, she must use different colors for those cells. Return the minimal number of colors she needs.
	// 
	// DEFINITION
	// Class:HexagonalBoard
	// Method:minColors
	// Parameters:String[]
	// Returns:int
	// Method signature:int minColors(String[] board)
	// 
	// 
	// CONSTRAINTS
	// -board will contain between 1 and 50 elements, inclusive.
	// -Each element of board will contain exactly N characters, where N is the number of elements in board.
	// -Each character in board will be either 'X' or '-'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"---",
	//  "---",
	//  "---"}
	//  
	// 
	// Returns: 0
	// 
	// She won't color any cells, so she won't need any colors.
	// 
	// 1)
	// {"-X--",
	//  "---X",
	//  "----",
	//  "-X--"}
	// 
	// Returns: 1
	// 
	// She can color all cells with the same color.
	// 
	// 2)
	// {"XXXX",
	//  "---X",
	//  "---X",
	//  "---X"}
	// 
	// Returns: 2
	// 
	// For example, she can color cells in the following way:
	// 
	// Color cells (0, 0), (0, 2), (1, 3), and (3, 3) red.
	// Color cells (0, 1), (0, 3), and (2, 3) blue.
	// 
	// 
	// 
	// 3)
	// {"XX-XX--"
	// ,"-XX-XXX"
	// ,"X-XX--X"
	// ,"X--X-X-"
	// ,"XX-X-XX"
	// ,"-X-XX-X"
	// ,"-XX-XX-"}
	// 
	// Returns: 3
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
