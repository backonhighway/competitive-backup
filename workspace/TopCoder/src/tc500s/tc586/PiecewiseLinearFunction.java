package tc500s.tc586;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PiecewiseLinearFunction
{
	public int maximumSolutions(int[] Y)
	{
		int len = Y.length;
		for (int i = 1; i < len; i++) {
			if (Y[i-1] == Y[i]) return -1;
		}
		
		double[] sorted = new double[len];
		for (int i = 0; i < len; i++) {
			sorted[i] = (double) Y[i];
		}
		Arrays.sort(sorted);
		
		List<Double> list = new ArrayList<>();
		for (int i = 1; i < len; i++) {
			list.add((sorted[i] + sorted[i-1]) / 2.0);
		}
		for (int i = 0; i < len; i++) {
			list.add(sorted[i]);
		}
		
		int ret = 0;
		for (double d : list) {
			int sum = 0;
			for (int j = 0; j < len; j++) {
				if (Y[j] == d) sum++;
			}
			for (int j = 1; j < len; j++) {
				if (Y[j-1] < d && d < Y[j]) sum++;
				else if (Y[j] < d && d < Y[j-1]) sum++;
			}
			ret = Math.max(ret, sum);
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		PiecewiseLinearFunction obj;
		int answer;
		obj = new PiecewiseLinearFunction();
		long startTime = System.currentTimeMillis();
		answer = obj.maximumSolutions(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{3,2};
		p1 = 1;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{4,4};
		p1 = -1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{1,4,-1,2};
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{2,1,2,1,3,2,3,2};
		p1 = 5;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{125612666,-991004227,0,6,88023,-1000000000,1000000000,-1000000000,1000000000};
		p1 = 6;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// F is a function that is defined on all real numbers from the closed interval [1,N].
	// You are given a int[] Y with N elements.
	// For each i (1 <= i <= N) we have F(i) = Y[i-1].
	// Additionally, you know that F is piecewise linear: for each i, on the interval [i,i+1] F is a linear function.
	// The function F is uniquely determined by this information.
	// For example, if F(4)=1 and F(5)=6 then we must have F(4.7)=4.5.
	// 
	// As another example, this is the plot of the function F for Y = {1, 4, -1, 2}.
	// 
	// 
	// 
	// Given a real number y, we can count the number of solutions to the equation F(x)=y.
	// For example, for the function plotted above there are 0 solutions for y=7, there is 1 solution for y=4, and there are 3 solutions for y=1.1.
	// We are looking for the largest number of solutions such an equation can have.
	// For the function plotted above the answer would be 3: there is no y such that F(x)=y has more than 3 solutions.
	// 
	// If there is an y such that the equation F(x)=y has infinitely many solutions, return -1.
	// Otherwise, return the maximum possible number of solutions such an equation may have.
	// 
	// 
	// DEFINITION
	// Class:PiecewiseLinearFunction
	// Method:maximumSolutions
	// Parameters:int[]
	// Returns:int
	// Method signature:int maximumSolutions(int[] Y)
	// 
	// 
	// CONSTRAINTS
	// -Y will contain between 2 and 50 elements, inclusive.
	// -Each element of Y will be between -1,000,000,000 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {3, 2}
	// 
	// Returns: 1
	// 
	// The graph of this function is a line segment between (1, 3) and (2, 2). For any y such that 2 ? y ? 3 the equation F(x)=y has 1 solution, and for any other y it has 0 solutions.
	// 
	// 1)
	// {4, 4}
	// 
	// Returns: -1
	// 
	// The function's plot is a horizontal line segment between points (1, 4) and (2, 4). For y=4, F(x)=y has infinitely many solutions.
	// 
	// 2)
	// {1, 4, -1, 2}
	// 
	// Returns: 3
	// 
	// This is the example from the problem statement. Three solutions are obtained for any value of y between 1 and 2, inclusive:
	// 
	// 
	// 
	// 3)
	// {2, 1, 2, 1, 3, 2, 3, 2}
	// 
	// Returns: 5
	// 
	// 
	// 
	// 4)
	// {125612666, -991004227, 0, 6, 88023, -1000000000, 1000000000, -1000000000, 1000000000}
	// 
	// Returns: 6
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
