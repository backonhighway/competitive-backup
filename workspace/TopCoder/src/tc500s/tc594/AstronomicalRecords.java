package tc500s.tc594;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class AstronomicalRecords
{
	public int minimalPlanets(int[] A, int[] B)
	{
		int alen = A.length;
		int blen = B.length;
		int ret = Integer.MAX_VALUE;
		for (int i = 0; i < alen; i++) {
			for (int j = 0; j < blen; j++) {
				//standardize
				long p = B[j];
				long q = A[i];
				long[] a = new long[alen];
				long[] b = new long[blen];
				for (int k = 0; k < alen; k++) a[k] = A[k] * p;
				for (int k = 0; k < blen; k++) b[k] = B[k] * q;
				
				//lcs
				ret = Math.min(ret, alen + blen - lcs(a,b));
			}
		}
		return ret;
	}
	
	public int lcs(long[] a, long[] b) {
		int alen = a.length;
		int blen = b.length;
		
		int[][] dp = new int[alen+1][blen+1];
		for (int i = 0; i < alen; i++) {
			for (int j = 0; j < blen; j++) {
				if (a[i] == b[j]) {
					dp[i+1][j+1] = dp[i][j] + 1;
				} else {
					dp[i+1][j+1] = Math.max(dp[i][j+1], dp[i+1][j]);
				}
			}
		}
		return dp[alen][blen];
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		AstronomicalRecords obj;
		int answer;
		obj = new AstronomicalRecords();
		long startTime = System.currentTimeMillis();
		answer = obj.minimalPlanets(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{1,2,1,2,1};
		p1 = new int[]{2,1,2,1,2};
		p2 = 6;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{1,2,3,4};
		p1 = new int[]{2,4,6,8};
		p2 = 4;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{2,3,2,3,2,3,2};
		p1 = new int[]{600,700,600,700,600,700,600};
		p2 = 10;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{1,2,3,4,5,6,7,8,9};
		p1 = new int[]{6,7,8,9,10,11,12};
		p2 = 12;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{100000000,200000000};
		p1 = new int[]{200000000,100000000};
		p2 = 3;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Ciel found two astronomical records.
	// They both describe the same solar system.
	// Each planet in the system can be characterized by two parameters each being a positive number: planet's size and the distance at which it orbits the sun.
	// All orbital distances are pairwise distinct, but sizes of some planets may be the same.
	// 
	// 
	// 
	// The first record is a int[] A with x elements.
	// These elements give the relative sizes of some x planets in the solar system.
	// Formally, the sizes of those planets have the ratio A[0] : A[1] : ... : A[x-1].
	// The planets described by A are ordered by their distance from the sun.
	// (That is, earlier elements of A correspond to planets that are closer to the sun.)
	// 
	// 
	// 
	// The second record is a int[] B with y elements.
	// These elements give the relative sizes of some y planets in the solar system.
	// Formally, the sizes of those planets have the ratio B[0] : B[1] : ... : B[y-1].
	// The planets described by B are ordered by their distance from the sun.
	// 
	// 
	// 
	// Note that the planets considered by a record do not have to be consecutive.
	// For example, if a solar system contains the planets P, Q, R, S, T, and U, it is possible that the first record compares P, R, and S, and the second record compares Q, R, T, and U.
	// 
	// 
	// 
	// We assume that both records are correct.
	// Return the smallest possible total number of planets in the solar system.
	// 
	// DEFINITION
	// Class:AstronomicalRecords
	// Method:minimalPlanets
	// Parameters:int[], int[]
	// Returns:int
	// Method signature:int minimalPlanets(int[] A, int[] B)
	// 
	// 
	// CONSTRAINTS
	// -A will contain between 2 and 50 elements, inclusive.
	// -B will contain between 2 and 50 elements, inclusive.
	// -Each element in A will be between 1 and 1,000,000,000, inclusive.
	// -Each element in B will be between 1 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2,1,2,1}
	// {2,1,2,1,2}
	// 
	// Returns: 6
	// 
	// There have to be at least 5 planets, because each record compares 5 of them.
	// There cannot be exactly 5 planets, because the first one would have to be both smaller than and larger than the second one.
	// (Their ratio would have to be both 1:2 and 2:1, which is impossible.)
	// There can be exactly 6 planets with relative sizes 1,2,1,2,1,2.
	// 
	// 1)
	// {1,2,3,4}
	// {2,4,6,8}
	// 
	// Returns: 4
	// 
	// There can be only 4 planets because 1:2:3:4 = 2:4:6:8.
	// 
	// 2)
	// {2,3,2,3,2,3,2}
	// {600,700,600,700,600,700,600}
	// 
	// Returns: 10
	// 
	// 
	// 
	// 3)
	// {1,2,3,4,5,6,7,8,9}
	// {6,7,8,9,10,11,12}
	// 
	// Returns: 12
	// 
	// 
	// 
	// 4)
	// {100000000,200000000}
	// {200000000,100000000}
	// 
	// Returns: 3
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
