package tc500s.tc588;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class GUMIAndSongsDiv1
{
	public int maxSongs(int[] duration, int[] tone, int T)
	{
		int len = duration.length;
		Song[] songs = new Song[len];
		for (int i = 0; i < len; i++) {
			songs[i] = new Song();
			songs[i].duration = duration[i];
			songs[i].tone = tone[i];
		}
		Arrays.sort(songs, Comparator.comparing(s -> s.tone));
		
		int ret = 0;
		for (int i = 0; i < len; i++) {
			for (int j = i; j < len; j++) {
				int count = 1;
				int time = songs[j].tone - songs[i].tone + songs[i].duration;
				if (i != j) {
					time += songs[j].duration;
					count++;
				}
				if (time > T) continue;
				
				if (j - i - 1 > 0) {
					int[] fixed = new int[j - i - 1];
					for (int k = i + 1; k < j; k++) {
						fixed[k - i - 1] = songs[k].duration;
					}
					Arrays.sort(fixed);
					
					for (int k = 0; k < fixed.length; k++) {
						if (time + fixed[k] <= T) {
							time += fixed[k];
							count++;
						}
					}
				}

				ret = Math.max(ret, count);
			}
		}
		return ret;
		
	}
	
	class Song {
		int tone;
		int duration;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		GUMIAndSongsDiv1 obj;
		int answer;
		obj = new GUMIAndSongsDiv1();
		long startTime = System.currentTimeMillis();
		answer = obj.maxSongs(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int[] p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{3,5,4,11};
		p1 = new int[]{2,1,3,1};
		p2 = 17;
		p3 = 3;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{100,200,300};
		p1 = new int[]{1,2,3};
		p2 = 99;
		p3 = 0;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{1,2,3,4};
		p1 = new int[]{1,1,1,1};
		p2 = 100;
		p3 = 4;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{9,11,13,17};
		p1 = new int[]{2,1,3,4};
		p2 = 20;
		p3 = 1;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{87,21,20,73,97,57,12,80,86,97,98,85,41,12,89,15,41,17,68,37,21,1,9,65,4,67,38,91,46,82,7,98,21,70,99,41,21,65,11,1,8,12,77,62,52,69,56,33,98,97};
		p1 = new int[]{88,27,89,2,96,32,4,93,89,50,58,70,15,48,31,2,27,20,31,3,23,86,69,12,59,61,85,67,77,34,29,3,75,42,50,37,56,45,51,68,89,17,4,47,9,14,29,59,43,3};
		p2 = 212;
		p3 = 12;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Gumi loves singing.
	// She knows N songs.
	// The songs are numbered 0 through N-1.
	// She now has some time and she would love to sing as many different songs as possible. 
	// 
	// You are given a int[] duration.
	// For each i, duration[i] is the duration of song i in Gumi's time units. 
	// 
	// Gumi finds it difficult to sing songs with quite different tones consecutively.
	// You are given a int[] tone with the following meaning:
	// If Gumi wants to sing song y immediately after song x, she will need to spend |tone[x]-tone[y]| units of time resting between the two songs.
	// (Here, || denotes absolute value.) 
	// 
	// You are also given an int T.
	// Gumi has T units of time for singing.
	// She can start singing any song she knows immediately at the beginning of this time interval.
	// Compute the maximal number of different songs she can sing completely within the given time.
	// 
	// 
	// DEFINITION
	// Class:GUMIAndSongsDiv1
	// Method:maxSongs
	// Parameters:int[], int[], int
	// Returns:int
	// Method signature:int maxSongs(int[] duration, int[] tone, int T)
	// 
	// 
	// CONSTRAINTS
	// -duration and tone will each contain between 1 and 50 elements, inclusive.
	// -duration and tone will contain the same number of elements.
	// -Each element of duration will be between 1 and 100,000, inclusive.
	// -Each element of tone will be between 1 and 100,000, inclusive.
	// -T will be between 1 and 10,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {3, 5, 4, 11}
	// {2, 1, 3, 1}
	// 17
	// 
	// Returns: 3
	// 
	// There are four songs. 
	// Two songs have tone 1 and their durations are 5 and 11, respectively.
	// One song has tone 2 and its duration is 3.
	// One song has tone 3 and its duration is 4.
	// Gumi has 17 units of time to sing. 
	// 
	// It is impossible for Gumi to sing all four songs she knows within the given time: even without the breaks the total length of all songs exceeds 17. 
	// 
	// Here is one way how she can sing three songs:
	// First, she sings song 0 in 3 units of time.
	// Second, she waits for |2-3|=1 unit of time and then sings song 2 in 4 units of time.
	// Finally, she waits for |3-1|=2 units of time and then sings song 1 in 5 units of time.
	// The total time spent is 3+1+4+2+5 = 15 units of time.
	// 
	// 
	// 1)
	// {100, 200, 300}
	// {1, 2, 3}
	// 99
	// 
	// Returns: 0
	// 
	// In this case, T is so small that she can't sing at all.
	// 
	// 2)
	// {1, 2, 3, 4}
	// {1, 1, 1, 1}
	// 100
	// 
	// Returns: 4
	// 
	// There is plenty of time, so she can sing all of 4 songs.
	// 
	// 3)
	// {9, 11, 13, 17}
	// {2, 1, 3, 4}
	// 20
	// 
	// Returns: 1
	// 
	// 
	// 
	// 4)
	// {87,21,20,73,97,57,12,80,86,97,98,85,41,12,89,15,41,17,68,37,21,1,9,65,4,
	//  67,38,91,46,82,7,98,21,70,99,41,21,65,11,1,8,12,77,62,52,69,56,33,98,97}
	// {88,27,89,2,96,32,4,93,89,50,58,70,15,48,31,2,27,20,31,3,23,86,69,12,59,
	//  61,85,67,77,34,29,3,75,42,50,37,56,45,51,68,89,17,4,47,9,14,29,59,43,3}
	// 212
	// 
	// Returns: 12
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
