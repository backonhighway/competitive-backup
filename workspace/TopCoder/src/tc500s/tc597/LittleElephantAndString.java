package tc500s.tc597;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class LittleElephantAndString
{
	public int getNumber(String A, String B)
	{
		int len = A.length();
		char[] a = A.toCharArray();
		char[] b = B.toCharArray();
		Arrays.sort(a);
		Arrays.sort(b);
		for (int i = 0; i < len; i++) {
			if (a[i] != b[i]) return -1;
		}
		
		int ret = 0;
		int ai = len - 1;
		for (int bi = len-1; bi >= 0; bi--) {
			for (; ai >= 0; ai--) {
				if (B.charAt(bi) == A.charAt(ai)) {
					ai--;
					break;
				}
				ret++;
			}
		}
		return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"");
		System.out.println("]");
		LittleElephantAndString obj;
		int answer;
		obj = new LittleElephantAndString();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		String p0;
		String p1;
		int p2;
		
		// ----- test 0 -----
		disabled = false;
		p0 = "ABC";
		p1 = "CBA";
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = "A";
		p1 = "B";
		p2 = -1;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = "AAABBB";
		p1 = "BBBAAA";
		p2 = 3;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		p1 = "ZYXWVUTSRQPONMLKJIHGFEDCBA";
		p2 = 25;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = "A";
		p1 = "A";
		p2 = 0;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = "DCABA";
		p1 = "DACBA";
		p2 = 2;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Little Elephant from the Zoo of Lviv likes strings.
	// 
	// 
	// 
	// 
	// You are given a String A and a String B of the same length. In one turn Little Elephant can choose any character of A and move it to the beginning of the string (i.e., before the first character of A). Return the minimal number of turns needed to transform A into B. If it's impossible, return -1 instead.
	// 
	// 
	// DEFINITION
	// Class:LittleElephantAndString
	// Method:getNumber
	// Parameters:String, String
	// Returns:int
	// Method signature:int getNumber(String A, String B)
	// 
	// 
	// CONSTRAINTS
	// -A will contain between 1 and 50 characters, inclusive.
	// -B will contain between 1 and 50 characters, inclusive.
	// -A and B will be of the same length.
	// -A and B will consist of uppercase letters ('A'-'Z') only.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "ABC"
	// "CBA"
	// 
	// Returns: 2
	// 
	// The optimal solution is to make two turns. On the first turn, choose character 'B' and obtain string "BAC". On the second turn, choose character 'C' and obtain "CBA".
	// 
	// 1)
	// "A"
	// "B"
	// 
	// Returns: -1
	// 
	// In this case, it's impossible to transform A into B.
	// 
	// 2)
	// "AAABBB"
	// "BBBAAA"
	// 
	// Returns: 3
	// 
	// 
	// 
	// 3)
	// "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	// "ZYXWVUTSRQPONMLKJIHGFEDCBA"
	// 
	// Returns: 25
	// 
	// 
	// 
	// 4)
	// "A"
	// "A"
	// 
	// Returns: 0
	// 
	// 
	// 
	// 5)
	// "DCABA"
	// "DACBA"
	// 
	// Returns: 2
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
