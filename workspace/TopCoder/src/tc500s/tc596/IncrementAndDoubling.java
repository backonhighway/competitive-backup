package tc500s.tc596;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class IncrementAndDoubling
{
	public int getMin(int[] desiredArray)
	{
		int len = desiredArray.length;
		int ret = 0;
		
		while (true) {
			if (!isNotDone(desiredArray)) break;
			//decrement
			for (int i = 0; i < len; i++) {
				if (desiredArray[i] == 0) continue;
				if (desiredArray[i] % 2 != 0) {
					ret++;
					desiredArray[i]--;
				}
			}
			if (!isNotDone(desiredArray)) break;
			//half
			ret++;
			for (int i = 0; i < len; i++) {
				desiredArray[i] /= 2;
			}
		}
		
		
		return ret;
	}
	
	private boolean isNotDone(int[] n) {
		for (int i = 0; i < n.length; i++) {
			if (n[i] != 0) return true;
		}
		return false;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		IncrementAndDoubling obj;
		int answer;
		obj = new IncrementAndDoubling();
		long startTime = System.currentTimeMillis();
		answer = obj.getMin(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{2,1};
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{16,16,16};
		p1 = 7;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{100};
		p1 = 9;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{0,0,1,0,1};
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{123,234,345,456,567,789};
		p1 = 40;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 5 -----
		disabled = false;
		p0 = new int[]{7,5,8,1,8,6,6,5,3,5,5,2,8,9,9,4,6,9,4,4,1,9,9,2,8,4,7,4,8,8,6,3,9,4,3,4,5,1,9,8,3,8,3,7,9,3,8,4,4,7};
		p1 = 84;
		all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// You have an array with N elements.
	// Initially, each element is 0.
	// You can perform the following operations:
	// 
	// 
	// 
	// Increment operation: Choose one element of the array and increment the value by one.
	// Doubling operation: Double the value of each element.
	// 
	// 
	// 
	// You are given a int[] desiredArray containing N elements.
	// Compute and return the smallest possible number of operations needed to change the array from all zeros to desiredArray.
	// 
	// 
	// DEFINITION
	// Class:IncrementAndDoubling
	// Method:getMin
	// Parameters:int[]
	// Returns:int
	// Method signature:int getMin(int[] desiredArray)
	// 
	// 
	// CONSTRAINTS
	// -desiredArray will contain between 1 and 50 elements, inclusive.
	// -Each element of desiredArray will be between 0 and 1,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {2, 1}
	// 
	// Returns: 3
	// 
	// One of the optimal solutions is to apply increment operations to element 0 twice and then to element 1 once.
	// Total number of operations is 3.
	// 
	// 
	// 
	// 1)
	// {16, 16, 16}
	// 
	// Returns: 7
	// 
	// The optimum solution looks as follows.
	// First, apply an increment operation to each element.
	// Then apply the doubling operation four times.
	// Total number of operations is 3+4=7.
	// 
	// 
	// 
	// 2)
	// {100}
	// 
	// Returns: 9
	// 
	// 
	// 
	// 3)
	// {0, 0, 1, 0, 1}
	// 
	// Returns: 2
	// 
	// Some elements in desiredArray may be zeros.
	// 
	// 4)
	// {123, 234, 345, 456, 567, 789}
	// 
	// Returns: 40
	// 
	// 
	// 
	// 5)
	// {7,5,8,1,8,6,6,5,3,5,5,2,8,9,9,4,6,9,4,4,1,9,9,2,8,4,7,4,8,8,6,3,9,4,3,4,5,1,9,8,3,8,3,7,9,3,8,4,4,7}
	// 
	// Returns: 84
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
