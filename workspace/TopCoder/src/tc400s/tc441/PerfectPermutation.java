package tc400s.tc441;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PerfectPermutation
{
	public int reorder(int[] P)
	{
		boolean[] visited = new boolean[P.length];
		int circleCount = 0;
		for (int i=0; i<P.length; i++) {
			if(visited[i]) continue;
			circleCount++;
			
			int pos = i;
			while(!visited[pos]) {
				visited[pos] = true;
				pos = P[pos];
			}
		}
		return (circleCount == 1) ? 0 : circleCount;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		PerfectPermutation obj;
		int answer;
		obj = new PerfectPermutation();
		long startTime = System.currentTimeMillis();
		answer = obj.reorder(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		disabled = false;
		p0 = new int[]{2,0,1};
		p1 = 0;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 1 -----
		disabled = false;
		p0 = new int[]{2,0,1,4,3};
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 2 -----
		disabled = false;
		p0 = new int[]{2,3,0,1};
		p1 = 2;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 3 -----
		disabled = false;
		p0 = new int[]{0,5,3,2,1,4};
		p1 = 3;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		// ----- test 4 -----
		disabled = false;
		p0 = new int[]{4,2,6,0,3,5,9,7,8,1};
		p1 = 5;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------
		
		if (all_right) {
			if (tests_disabled) {
				System.out.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A permutation A[0], A[1], ..., A[N-1] is a sequence containing each integer between 0 and N-1, inclusive, exactly once.  Each permutation A of length N has a corresponding child array B of the same length, where B is defined as follows:
	// 
	// 
	// B[0] = 0
	// B[i] = A[B[i-1]], for every i between 1 and N-1, inclusive.
	// 
	// 
	// A permutation is considered perfect if its child array is also a permutation.
	// 
	// Below are given all permutations for N=3 with their child arrays. Note that for two of these permutations ({1, 2, 0} and {2, 0, 1}) the child array is also a permutation, so these two permutations are perfect.
	// 
	// 
	// Permutation		Child array
	// {0, 1, 2}		{0, 0, 0}
	// {0, 2, 1}		{0, 0, 0}
	// {1, 0, 2}		{0, 1, 0}
	// {1, 2, 0}		{0, 1, 2}
	// {2, 0, 1}		{0, 2, 1}
	// {2, 1, 0}		{0, 2, 0}
	// 
	// 
	// You are given a int[] P containing a permutation of length N.  Find a perfect permutation Q of the same length such that the difference between P and Q is as small as possible, and return this difference.  The difference between P and Q is the number of indices i for which P[i] and Q[i] are different.
	// 
	// DEFINITION
	// Class:PerfectPermutation
	// Method:reorder
	// Parameters:int[]
	// Returns:int
	// Method signature:int reorder(int[] P)
	// 
	// 
	// CONSTRAINTS
	// -P will contain between 1 and 50 elements, inclusive.
	// -P will contain each integer between 0 and N-1, inclusive, exactly once, where N is the number of elements in P.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {2, 0, 1}
	// 
	// Returns: 0
	// 
	// P is a perfect permutation, so we can use the same permutation for Q.  The difference is then 0 because P and Q are the same.
	// 
	// 1)
	// {2, 0, 1, 4, 3}
	// 
	// Returns: 2
	// 
	// Q might be {2, 0, 3, 4, 1}.
	// 
	// 2)
	// {2, 3, 0, 1}
	// 
	// Returns: 2
	// 
	// Q might be {1, 3, 0, 2}.
	// 
	// 3)
	// {0, 5, 3, 2, 1, 4}
	// 
	// Returns: 3
	// 
	// 
	// 
	// 4)
	// {4, 2, 6, 0, 3, 5, 9, 7, 8, 1}
	// 
	// Returns: 5
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}

//Powered by KawigiEdit-pf 2.3.0!
